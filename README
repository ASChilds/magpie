Running Big Data Software on Traditional HPC Clusters

Albert Chu
Updated January 23, 2015
chu11@llnl.gov

What is this project
--------------------

This project contains a number of scripts for running Big Data
software in HPC environments.  Thus far, Hadoop, Hbase, Pig, Spark,
Storm, and Zookeeper are supported.  It currently supports running
over the schedulers of Slurm and Moab, and the resource managers of
Slurm and Torque.  It currently supports running over the parallel
file system Lustre and running over any generic network filesytem.

Some of the features presently supported:

- Run Hadoop, Hbase, or Pig interactively or via scripts.
- Run Mapreduce 1.0 or 2.0 jobs via Hadoop 1.0 or 2.0
- Run against a number of filesystem options, such as HDFS, HDFS over
  Lustre, HDFS over a generic network filesystem, Lustre directly, or
  a generic network filesystem.
- Take advantage of SSDs for local caching if available
- Run the UDA Infiniband optimization plugin for Hadoop.
- Make decent optimizations of Hadoop for your hardware

Some experimental features currently supported:

- Support MagpieNetworkFS - See README.magpienetworkfs
- Support intellustre - See README.intellustre
- Support HDFS federation - See README.hdfsfederation

Basic Idea
----------

The basic idea behind these scripts are to:

1) Allocate nodes on a cluster using your HPC scheduler/resource
   manager.  Slurm and Moab are currently supported.

2) Scripts will setup configuration files so the rank 0 node is
   the "master".  All compute nodes will have configuration files
   created that point to the node designated as the master server.

   The configuration files will be populated with values for your
   filesystem choice and the hardware that exists in your cluster.
   Reasonable attempts are made to determine optimal values (they are
   almost certainly better than the default values).

3) Launch daemons on all nodes.  The rank 0 node will run master
   daemons, such as the Hadoop Namenode or the Hbase Master.  All
   remaining nodes will run appropriate slave daemons, such as the
   Hadoop Datanodes or Hbase RegionServers.

4) Now you have a mini big data cluster to do whatever you want.  You
   can log into the master node and interact with your mini big data
   cluster however you want.  Or you could have Magpie run a script to
   execute your big data calculation instead.

Basic Instructions For Running Hadoop
-------------------------------------

1) Download your favorite version of Hadoop off of Apache and install
   it into a location where it's accessible on all cluster nodes.
   Usually this is on a NFS home directory.

   See below about patches that may be necessary for Hadoop depending
   on your environment and Hadoop version.

   See below about misc/magpie-apache-download-and-setup.sh, which may
   make the downloading and patching easier.

2) Select an appropriate submission script for running your job.  You
   can find them in the directory submission-scripts/, with Slurm
   Sbatch scripts in script-sbatch, Moab Msub+Slurm scripts in
   script-msub-slurm, and Moab Msub+Torque scripts in
   script-msub-torque.

   You'll likely want to start with the base hadoop script
   (e.g. magpie.sbatch-hadoop) for your scheduler/resource manager.  If
   you wish to configure more, you can choose to start with the base
   script (e.g. magpie.sbatch) which contains all configuration
   options.

3) Setup your job essentials at the top of the script.  As an example,
   the following are the essentials for running with Slurm w/ Sbatch.

   #SBATCH --nodes : Set how many nodes you want in your job

   SBATCH_TIMELIMIT : Set the time for this job to run

   #SBATCH --partition : Set the job partition

   MAGPIE_SCRIPTS_HOME : Set where your scripts are.

   MAGPIE_LOCAL_DIR : For scratch space files

   MAGPIE_JOB_TYPE : Set to "hadoop" most likely.

   JAVA_HOME : B/c you need to ...

4) Now setup the essentials for Hadoop.

   HADOOP_SETUP : Set to yes

   HADOOP_SETUP_TYPE : Are you running Mapreduce version 1 or 2.  Or
   if you are only configuring HDFS, HDFS 1 or 2.

   HADOOP_VERSION : Make sure your build matches HADOOP_SETUP_TYPE
   (i.e. don't say you want MapReduce 1 and point to Hadoop 2.0 build)

   HADOOP_HOME : Where your hadoop code is.  Typically in an NFS mount.

   HADOOP_LOCAL_DIR : A small place for conf files and log files local
   to each node.  Typically /tmp directory.

   HADOOP_FILESYSTEM_MODE : Most will likely want "hdfsoverlustre" or
   "hdfsovernetworkfs".  See below for details on HDFS over Lustre and
   HDFS over NetworkFS.

   HADOOP_HDFSOVERLUSTRE_PATH or equivalent: For HDFS over Lustre, you
   need to set this.  If not using HDFS over Lustre, set the
   appropriate path for your filesystem mode choice.

5) Select how your job will run by setting HADOOP_MODE.  The first
   time you'll probably want to run w/ 'terasort' mode just to try
   things out and make things look setup correctly.  Later you may
   want to run w/ 'script' or 'interactive' mode to run real
   calculations.

6) Submit your job into the cluster by running "sbatch -k
   ./magpie.sbatchfile" for Slurm or "msub ./magpie.msubfile" for
   Moab.  Add any other options you see fit.

7) Look at your job output file to see your output.  There will also
   be some notes/instructions/tips in the output file for viewing the
   status of your job, how to interact with it, etc..

Basic Instructions For Running Hadoop w/ UDA
--------------------------------------------

UDA is an Infiniband plugin to alter the suffle/sort mechanism in
Hadoop to take advantage of RDMA.  It can be found at:

https://code.google.com/p/uda-plugin/

It is currently supported in Hadoop 2.3.0 and newer.  UDA can be used
with older versions of Hadoop but will require patches against those
builds.  Magpie currently supports UDA in versions 2.2.0 and up.
Minor modifications to the scripts should allow support in older
versions.

To configure UDA to be used with Hadoop, you need to configure:

HADOOP_UDA_SETUP : Set to yes

HADOOP_UDA_JAR : Set to the path for the uda jar file, such as
                 uda-hadoop-2.x.jar for Hadoop 2.2.0.

HADOOP_UDA_LIBPATH : Set to location of libuda.so.  Necessary if your
                     libuda.so isn't in a common location (e.g. /usr/lib).

You'll find starting point scripts such as
magpie.sbatch-hadoop-with-uda and magpie.msub-slurm-hadoop-with-uda to
begin configuration.

If you are building UDA yourself, be aware that the jar may have
difficulty finding the libuda.so file.  Some appropriately placed
symlinks in your filesystem should solve that problem.  Please refer
to error logs to see the paths you may be missing.

Remember, that when running your job, you may also need to link to the
UDA jar file to your job run, such as "--libjars /mypath/uda-hadoop-2.x.jar"

Basics of HDFS over Lustre/NetworkFS
------------------------------------

Instead of using local disk, we designate a Lustre/network file system
directory to "emulate" local disk for each compute node.  For example,
lets say you have 4 compute nodes.  If we create the following paths
in Lustre,

/lustre/myusername/node-0
/lustre/myusername/node-1
/lustre/myusername/node-2
/lustre/myusername/node-3

We can give each of these paths to one of the compute nodes, which
they can treat like a local disk.  HDFS operates on top of these
directories just as though there were a local disk on the server.

Q: Does that mean I have to constantly rebuild HDFS everytime I start
  a job?

A: No, using node ranks, "disk-paths" can be consistently assigned to
   nodes so that all your HDFS files from a previous run can exist on
   a later run.  The next time you run your job, it doesn't matter
   what server you're running on, b/c your scheduler/resource manager
   will assign that node it's appropriate rank.  The node will
   subsequently load HDFS from its appropriate directory.

Q: But that'll mean I have to consistently use the same number of
   cluster nodes?

A: Generally speaking no, but you can hit issues if you don't.  Just
   imagine what HDFS issues if you were on a traditional Hadoop
   cluster and added or removed nodes.

   Generally speaking, increasing the number of nodes you use for a
   job is fine.  Data you currently have in HDFS is still there and
   readable, but it is not viewed as "local" according to HDFS and
   more network transfers will have to happen.  You may wish to
   rebalance the HDFS blocks though.  The convenience script
   hadoop-rebalance-hdfs-over-lustre-if-increasing-nodes-script.sh can
   be used instead.

   (Special Note: The start-balancer.sh that is
   normally used probably will not work.  All of the paths are in
   Lustre/NetworkFS, so the "free space" on each "local" path is identical,
   messing up calculations for balancing (i.e. no "local disk" is
   more/less utilized than another).  

   Decreasing nodes is a bit more dangerous, as data can "disappear"
   just like if it were on a traditional Hadoop cluster.  If you try
   to scale down the number of nodes, you should go through the
   process of "decomissioning" nodes like on a real cluster, otherwise
   you may lose data.  You can decomission nodes through the
   hadoop-hdfs-over-lustre-nodes-decomission-script.sh convenience
   script.

Q: What should HDFS replication be?

A: The scripts in this package default to HDFS replication of 3 when
   HDFS over Lustre is done.  If HDFS replication is > 1, it can
   improve performance of your job reading in HDFS input b/c there
   will be fewer network transfer of data (i.e. Hadoop may need to
   transfer "non-local" data to another node).  In addition, if a
   datanode were to die (i.e. a node crashes) Hadoop has the ability
   to survive the crash just like in a traditional Hadoop cluster.

   The trade-off is space and HDFS writes vs HDFS reads.  With lower
   HDFS replication (lowest is 1) you save space and decrease time for
   writes.  With increased HDFS replication, you perform better on
   reads.

Q: What if I need to upgrade the HDFS version I'm using.

A: If you want to use a different Hadoop version than what you started
   with, you will have to go through the normal upgrade or rollback
   precedures for Hadoop.

   With Hadoop versions 2.2.0 and newer, there is a seemless upgrade
   path done by specifying "-upgrade" when running the "start-dfs.sh"
   script.  This is implemented in the "upgradehdfs" option for
   HADOOP_MODE in the launch scripts.

Pro vs Con of HDFS over Lustre/NetworkFS vs. Posix FS (e.g. rawnetowrkfs, etc.)
-------------------------------------------------------------------------------

Here are some pros vs. cons of using a network filesystem directly vs
HDFS over Lustre/NetworkFS.

HDFS over Lustre/NetworkFS:

Pro: Portability w/ code that runs against a "traditional" Hadoop
cluster.  If it runs on a "traditional" Hadoop cluster w/ local disk,
it should run fine w/ HDFS over Lustre/NetworkFS.

Con: Must always run job w/ Hadoop & HDFS running as a job.

Con: Must "import" and "export" data from HDFS using job runs, cannot
read/write directly.  On some clusters, this may involve a double copy
of data. e.g. first need to copy data into the cluster, then run job to
copy data into HDFS over Lustre/NetworkFS.

Con: Possible difficulty changing job size on clusters.

Con: If HDFS replication > 1, more space used up.

Posix FS directly:

Pro: You can read/write files to Lustre without Hadoop/HDFS running.

Pro: Less space used up.

Pro: Can adjust job size easily.

Con: Portability issues w/ code that usually runs on HDFS.  As an
example, HDFS has no concept of a working directory while Posix
filesystems do.  In addition, absolute paths will be different.  Code
will have to be adjusted for this.

Con: User must "manage" and organize their files directly, not gaining
the block advantages of HDFS.  If not handled well, this can lead to
performance issues.  For example, a Hadoop job that creates a 1
terabyte file under HDFS is creating a file made up of smaller HDFS
blocks.  The same job may create a single 1 terabyte file under access
to the Posix FS directly.  In the case of Lustre, striping of the file
must be handled by the user to ensure satisfactory performance.

Basic Instructions For Using Pig
--------------------------------

1) Download your favorite version of Pig off of Apache and install it
   into a location where it's accessible on all cluster nodes.
   Usually this is on a NFS home directory.

   Make sure that the version of Pig you install is compatible with
   the version of Hadoop you are using.

   In some cases, a re-compile of Pig may be necessary.  For example,
   by default Pig 0.12.0 works against the 0.20.0 (i.e. Hadoop 1.0)
   branch of Hadoop.  You may need to modify the Pig build.xml to work
   with the 0.23.0 branch (i.e. Hadoop 2.0).

   See below about misc/magpie-apache-download-and-setup.sh, which may
   make the downloading easier.

2) Select an appropriate submission script for running your job.  You
   can find them in the directory submission-scripts/, with Slurm
   Sbatch scripts in script-sbatch, Moab Msub+Slurm scripts in
   script-msub-slurm, and Moab Msub+Torque scripts in
   script-msub-torque.

   You'll likely want to start with the base hadoop+pig script
   (e.g. magpie.sbatch-hadoop-and-pig) for your scheduler/resource
   manager.  If you wish to configure more, you can choose to start
   with the base script (e.g. magpie.sbatch) which contains all
   configuration options.

3) Setup the essentials for Pig.  If you are letting Magpie do some
   setup, here are the essentials:

   MAGPIE_JOB_TYPE : Set to "pig".

   PIG_SETUP : Set to yes

   PIG_VERSION : Set appropriately.

   PIG_HOME : Where your pig code is.  Typically in an NFS mount.

   PIG_LOCAL_DIR : A small place for conf files and log files local to
   each node.  Typically /tmp directory.

5) Select how your job will run by setting PIG_MODE.  The first time
   you'll probably want to run w/ 'testpig' mode just to try things
   out and make things look setup correctly.  Later you may want to
   run w/ 'script' or 'interactive' mode to run real calculations.

6) Submit your job into the cluster by running "sbatch -k
   ./magpie.sbatchfile" for Slurm or "msub ./magpie.msubfile" for
   Moab.  Add any other options you see fit.

7) Look at your job output file to see your output.  There will also
   be some notes/instructions/tips in the output file for viewing the
   status of your job, how to interact with it, etc..

Basic Instructions For Running Zookeeper
----------------------------------------

1) Download your favorite version of Zookeeper off of Apache and install
   it into a location where it's accessible on all cluster nodes.
   Usually this is on a NFS home directory.  

   See below about misc/magpie-apache-download-and-setup.sh, which may
   make the downloading easier.

2) Select an appropriate submission script for running your job.  You
   can find them in the directory submission-scripts/, with Slurm
   Sbatch scripts in script-sbatch, Moab Msub+Slurm scripts in
   script-msub-slurm, and Moab Msub+Torque scripts in
   script-msub-torque.

   If the Zookeeper section isn't in it, just copy the Zookeeper
   section from base script (e.g. magpie.sbatch) into it.

   Be aware that your node allocation may need to change if you are
   running Zookeeper, as it normally runs on cluster nodes separate
   from the rest (e.g. separate from nodes running HDFS or Hbase
   Regionservers).

3) Setup the essentials for Zookeeper.  Here are the essentials:

   ZOOKEEPER_SETUP : Set to yes

   ZOOKEEPER_VERSION : Set appropriately.

   ZOOKEEPER_HOME : Where your zookeeper code is.  Typically in an NFS
   mount.

   ZOOKEEPER_REPLICATION_COUNT : Number of nodes in your Zookeeper
   quorom.

   ZOOKEEPER_MODE : This will almost certainly be "launch". 

   ZOOKEEPER_FILESYSTEM_MODE : most will likely want "networkfs" so
   data files can be stored to Lustre.  If you have local disks such
   as SSDs, you can use "local" instead.

   ZOOKEEPER_DATA_DIR : The base path for where you will store
   Zookeeper data.

   ZOOKEEPER_LOCAL_DIR : A small place for conf files and log files
   local to each node.  Typically /tmp directory.

4) Run "sbatch -k ./magpie.sbatchfile" or "msub ./magpie.msubfile"
   appropriately.  Now Zookeeper will be started along with your job.

Basic Instructions For Running Hbase
------------------------------------

1) Download your favorite version of Hbase off of Apache and install
   it into a location where it's accessible on all cluster nodes.
   Usually this is on a NFS home directory.  

   See below about patches that may be necessary for Hbase depending
   on your environment and Hbase version.

   See below about misc/magpie-apache-download-and-setup.sh, which may
   make the downloading and patching easier.

2) Select an appropriate submission script for running your job.  You
   can find them in the directory submission-scripts/, with Slurm
   Sbatch scripts in script-sbatch, Moab Msub+Slurm scripts in
   script-msub-slurm, and Moab Msub+Torque scripts in
   script-msub-torque.

   You'll likely want to start with the base hbase w/ hdfs script
   (e.g. magpie.sbatch-hbase-with-hdfs) for your scheduler/resource
   manager.  If you wish to configure more, you can choose to start
   with the base script (e.g. magpie.sbatch) which contains all
   configuration options.

3) Setup the essentials for Hbase.  Here are the essentials:

   HBASE_SETUP : Set to yes

   HBASE_VERSION : Set appropriately.

   HBASE_HOME : Where your Hbase code is.  Typically in an NFS
   mount.

   HBASE_LOCAL_DIR : A small place for conf files and log files local
   to each node.  Typically /tmp directory.

   HBASE_MODE : The first time you'll probably want to run w/
   'performanceeval' mode just to try things out.  Later you may want
   to run w/ 'script' or 'interactive' mode, as that is the more
   likely way to run.

4) Select how your job will run by setting HBASE_MODE.  The first time
   you'll probably want to run w/ 'performanceeval' mode just to try
   things out and make things look setup correctly.  Later you may
   want to run w/ 'script' or 'interactive' mode to run real
   calculations.

5) Hbase requires HDFS, so ensure the Hadoop w/ HDFS is configured and
   also in your submission script.  MapReduce is not needed with Hbase
   but can be setup along with it.  See above for Hadoop setup
   instructions.

6) Hbase requires Zookeeper, so setup the essentials for Zookeeper.
   See above for Zookeeper setup instructions.

7) Submit your job into the cluster by running "sbatch -k
   ./magpie.sbatchfile" for Slurm or "msub ./magpie.msubfile" for
   Moab.  Add any other options you see fit.

8) Look at your job output file to see your output.  There will also
   be some notes/instructions/tips in the output file for viewing the
   status of your job, how to interact with it, etc..

Hbase Notes
-----------

If you increase the size of your node allocation when running Hbase on
HDFS over Lustre or HDFS over NetworkFS, data/regions will not be
balanced over all of the new nodes.  Think of this similarly to how
data would not be distributed evenly if you added new nodes into a
traditional Hbase/Hadoop cluster.  Over time Hbase will rebalance data
over the new nodes.

Basic Instructions For Spark
----------------------------

1) Download your favorite version of Spark off of Apache and install
   it into a location where it's accessible on all cluster nodes.
   Usually this is on a NFS home directory.  You may need to set
   SPARK_HADOOP_VERSION and run 'sbt/sbt assembly' to prepare Spark
   for execution.  If you are not using the default Java
   implementation installed in your system, you may need to edit
   sbt/sbt to use the proper Java version you desire (this is the case
   with 0.9.1, not the case in future versions).

   See below about patches that may be necessary for Spark depending
   on your environment and Spark version.

   See below about misc/magpie-apache-download-and-setup.sh, which may
   make the downloading and patching easier.

2) Select an appropriate submission script for running your job.  You
   can find them in the directory submission-scripts/, with Slurm
   Sbatch scripts in script-sbatch, Moab Msub+Slurm scripts in
   script-msub-slurm, and Moab Msub+Torque scripts in
   script-msub-torque.

   You'll likely want to start with the base spark script
   (e.g. magpie.sbatch-spark) or spark w/ hdfs
   (e.g. magpie.sbatch-spark-with-hdfs) for your scheduler/resource
   manager.  If you wish to configure more, you can choose to start
   with the base script (e.g. magpie.sbatch) which contains all
   configuration options.

   It should be noted that you can run Spark without HDFS.  You can
   access files normally through "file://<path>".

3) Setup the essentials for Spark.  Here are the essentials:

   SPARK_SETUP : Set to yes

   SPARK_VERSION : Set appropriately.

   SPARK_HOME : Where your Spark code is.  Typically in an NFS
   mount.

   SPARK_LOCAL_DIR : A small place for conf files and log files local
   to each node.  Typically /tmp directory.

4) Select how your job will run by setting SPARK_MODE.  The first time
   you'll probably want to run w/ 'sparkpi' mode just to try things
   out and make things look setup correctly.  Later you may want to
   run w/ 'script' or 'interactive' mode to run real calculations.

5) Spark does not require HDFS, but many choose to use it.  If you do,
   setup Hadoop w/ HDFS in your submission script.  See above for
   Hadoop setup instructions.

   You may wish to run with SPARK_MODE set to 'sparkwordcount' to test
   the HDFS setup.

6) Submit your job into the cluster by running "sbatch -k
   ./magpie.sbatchfile" for Slurm or "msub ./magpie.msubfile" for
   Moab.  Add any other options you see fit.

7) Look at your job output file to see your output.  There will also
   be some notes/instructions/tips in the output file for viewing the
   status of your job, how to interact with it, etc..

Basic Instructions For Storm
----------------------------

1) Download your favorite version of Storm off of Apache and install
   it into a location where it's accessible on all cluster nodes.
   Usually this is on a NFS home directory.

   See below about patches that may be necessary for Storm depending
   on your environment and Storm version.

   See below about misc/magpie-apache-download-and-setup.sh, which may
   make the downloading and patching easier.

2) Select an appropriate submission script for running your job.  You
   can find them in the directory submission-scripts/, with Slurm
   Sbatch scripts in script-sbatch, Moab Msub+Slurm scripts in
   script-msub-slurm, and Moab Msub+Torque scripts in
   script-msub-torque.

   You'll likely want to start with the base storm script
   (e.g. magpie.sbatch-storm) for your scheduler/resource manager.  If
   you wish to configure more, you can choose to start with the base
   script (e.g. magpie.sbatch) which contains all configuration
   options.

3) Setup the essentials for Storm.  Here are the essentials:

   STORM_SETUP : Set to yes

   STORM_VERSION : Set appropriately.

   STORM_HOME : Where your Storm code is.  Typically in an NFS
   mount.

   STORM_LOCAL_DIR : A small place for conf files and log files local
   to each node.  Typically /tmp directory.

4) Select how your job will run by setting STORM_MODE.  The first time
   you'll probably want to run w/ 'stormwordcount' mode just to try
   things out and make things look setup correctly.  Later you may
   want to run w/ 'script' or 'interactive' mode to run real
   calculations.

5) Storm requires Zookeeper, so setup the essentials for Zookeeper.
   See above for Zookeeper setup instructions.

6) Submit your job into the cluster by running "sbatch -k
   ./magpie.sbatchfile" for Slurm or "msub ./magpie.msubfile" for
   Moab.  Add any other options you see fit.

7) Look at your job output file to see your output.  There will also
   be some notes/instructions/tips in the output file for viewing the
   status of your job, how to interact with it, etc..

Exported Environment Variables
------------------------------

The following environment variables are exported by magpie-run and may
be useful in scripts in your run or in pre/post run scripts.

MAGPIE_CLUSTER_NODERANK : the rank of the node you are on.  It's often
                          convenient to do something like

if [ $MAGPIE_CLUSTER_NODERANK == 0 ]
then 
   ....
fi

To only do something on one node of your allocation.

MAGPIE_NODE_COUNT : Number of nodes in this allocation.

MAGPIE_NODELIST : Nodes in your allocation.

MAGPIE_JOB_NAME : Job name

MAGPIE_JOB_ID : Job ID

MAGPIE_TIMELIMIT_MINUTES : Timelimit of job in minutes

HADOOP_MASTER_NODE : the master node of the Hadoop allocation

HADOOP_SLAVE_COUNT : number of compute/data nodes in your allocation
                     for Hadoop.  May be useful for adjusting run time
                     options such as reducer count.

HADOOP_SLAVE_CORE_COUNT : Total cores on slave nodes in the
       		          allocation.  May be useful for adjusting run
       		          time options such as reducer count.

HADOOP_NAMENODE : the master namenode of the Hadoop allocation.  Often
 		  used for accessing HDFS when the namenode + port
 		  must be specified in a script.

HADOOP_NAMENODE_PORT : the port of the namenode.  Often used for
 		  accessing HDFS when the namenode + port must be
 		  specified in a script.

HADOOP_CONF_DIR : the directory that Hadoop configuration files local
                  to the node are stored.

HADOOP_LOG_DIR : the directory Hadoop log files are stored

PIG_CONF_DIR : the directory that Pig configuration files
               local to the node are stored.

ZOOKEEPER_CONF_DIR : the directory that Zookeeper configuration files
          	     local to the node are stored.

ZOOKEEPER_LOG_DIR : the directory Zookeeper log files are stored

HBASE_CONF_DIR : the directory that Hbase configuration files local
                 to the node are stored.

HBASE_LOG_DIR : the directory Hbase log files are stored

HBASE_MASTER_NODE : the master node of the Hbase allocation

HBASE_REGIONSERVER_COUNT : number of region servers in your allocation
                           for Hbase.

SPARK_MASTER_NODE : the master node of the Spark allocation

SPARK_MASTER_PORT : the master port for running Spark jobs

SPARK_SLAVE_COUNT : number of compute/data nodes in your allocation
                    for Spark.  May be useful for adjusting run time
                    options such as reducer count.

SPARK_SLAVE_CORE_COUNT : Total cores on slave nodes in the allocation.
       		         May be useful for adjusting run time options
       		         such as reducer count.

SPARK_CONF_DIR : the directory that Spark configuration files local
                 to the node are stored.

SPARK_LOG_DIR : the directory Spark log files are stored

STORM_MASTER_NODE : the master node of the Storm allocation

STORM_NIMBUS_HOST : Identical to STORM_MASTER_NODE

STORM_WORKERS_COUNT : number of compute/data nodes in your allocation
                      for Storm.

STORM_CONF_DIR : the directory that Storm configuration files local
                 to the node are stored.

STORM_LOG_DIR : the directory Storm log files are stored

Convenience Scripts
-------------------

A number of convenience scripts are included in the scripts/
directory, both for possible usefulness and as examples.  They are
organized within the directory as follows:

job-scripts - These are scripts that you would run as a possible job
in Magpie.  You would set these scripts in Magpie job scripts in
environment variables such as MAGPIE_SCRIPT_PATH, HADOOP_SCRIPT_PATH,
HBASE_SCRIPT_PATH, etc.

pre-job-run-scripts - These are scripts that you would run before the
actual calculation is executed.  You would set these scripts in the
MAGPIE_PRE_JOB_RUN environment variable.

post-job-run-scripts - These are scripts that you would run after the
actual calculation is executed.  You would set these scripts in the
MAGPIE_POST_JOB_RUN environment variable.

misc - Other miscellaneous scripts.  These may be useful outside of
Magpie or are convenient in some other way.

Notable scripts worth mentioning:

pre-job-run-scripts/magpie-output-config-files-script.sh - This script
will output all of the conf files from your job.  It's convenient for
debugging.

post-job-run-scripts/magpie-gather-config-files-and-logs-script.sh -
This script will get all of the conf files and log files from Hadoop,
Hbase, Pig, and/or Zookeeper and store it in a location for
post-analysis of your job.  It's convenient for debugging.

job-scripts/hadoop-hdfs-over-lustre-nodes-decomission-script.sh - See
HDFS over Lustre section above for details.

job-scripts/hadoop-rebalance-hdfs-over-lustre-if-increasing-nodes-script.sh
- See HDFS over Lustre section above for details.

job-scripts/hadoop-hdfs-fsck-cleanup-corrupted-blocks-script.sh -
Cleanup/remove corrupted blocks in HDFS.

job-scripts/hbase-major-compaction.sh - Perform a major compaction on
all Hbase tables.

misc/magpie-apache-download-and-setup.sh - Script will automatically
download and patch Apache projects for you so you don't have to
manually download them.  It'll also configure several paths for you in
the launch scripts automatically.

Patching
--------

Generally speaking, no modifications to any projects are necessary.
However patches may be necessary depending on your environment,
software version, or special features.  The following is a summary of
the patching requirements, recompilation needs, and patch details
below.

Hadoop
- Patch to support non-ssh remote execution may be needed in some
  environments.  Patch can be applied directly to startup scripts, not
  needing a recompilation of source.
- Hadoop 1.0 may require recompilation if alternate solution for
  increased entropy cannot be done.
- Hadoop terasort may require recompilation if running over 'rawnetworkfs'.

Hbase
- Patch to support non-ssh remote execution may be needed in some
  environments.  Patch can be applied directly to startup scripts, not
  needing a recompilation of source.

Spark 
- Patch to support alternate config file directories is required.

  For versions < 1.0.0, patch can be applied directly to startup
  scripts, not needing a recompilation of source.

  For atleast Spark version 1.0.0 (possibly versions newer than it),
  patch for startup scripts and code is required, a recompilation of
  source is required.

  For Spark version 1.2.0, patch for startup scripts is required, but
  recompilation of source is not required.

- Patch to support non-ssh remote execution may be needed in some
  environments.  Patch can be applied directly to startup scripts, not
  needing a recompilation of source.

Storm
- Patch to support alternate config file directories and log file
  directories is required atleast through Storm 0.9.2.  Storm requires
  a recompilation of source.  Patch is no longer needed in 0.9.3.

Pig
- No patching necessary.
- However, a major bug exists in 0.12.0, which most users may wish to
  patch and recompile.

Zookeeper
- No patching necessary.

Patch - passwordless SSH for Hadoop, Hbase, and Spark
-----------------------------------------------------

Many projects in the big data space require passwordless ssh to launch
daemons on remote nodes.  In some environments, passwordless ssh is
disabled, therefore requiring a modification to allow you to use
non-ssh mechanisms for launching daemons.

I have submitted a patch for Hadoop at this JIRA:

https://issues.apache.org/jira/browse/HADOOP-9109

For those who use mrsh (https://github.com/chaos/mrsh), applying one
of the appropriate patches in the 'patches' directory will allow you
to specify mrsh for launching remote daemons instead of ssh using the
MAGPIE_REMOTE_CMD environment variable.

A similar patch is also available for Hbase and Spark.

Patch - low entropy in Hadoop 1.0
---------------------------------

See this Jira:

https://issues.apache.org/jira/browse/HDFS-1835

Hadoop 1.0 appears to have more trouble on diskless systems, as
diskless systems have less entropy in them.  So you may wish to apply
the patch in the above jira if things don't seem to be working.  I
noticed datanode log error on my diskless cluster:

2013-09-19 10:45:37,620 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: dnRegistration = DatanodeRegistration(apex114.llnl.gov:50010, storageID=, infoPort=50075, ipcPort=50020)

Notice the storageID is blank, that's b/c the random number
calculation failed.  Subsequently daemons aren't started, datanodes
can't connect to the namenode, etc., badness all around.

If you have root privileges, starting up the rngd daemon is another
way to solve this problem without resorting to patching.

Patch - Terasort over Raw Network FS in Hadoop
----------------------------------------------

I believe there is a bug in the Terasort example, leading to issues
with running Terasort against a parallel file system directly.  I
submitted a patch in this Jira.

https://issues.apache.org/jira/browse/MAPREDUCE-5528

The patch is included in the patches directory.

Patch - Alternate Config Dir for Spark
--------------------------------------

Unlike Hadoop and Hbase, for some reason Spark's startup scripts do
not allow flexibility with SPARK_CONF_DIR as of Spark 0.9.1.  Patches
to allow an alternate config directory is available in the patches
directory.  

Alternate conf dir support in the sbin directory is being monitored via:

https://issues.apache.org/jira/browse/SPARK-693

and

https://issues.apache.org/jira/browse/SPARK-1559

For atleast Spark version 1.0.0 (possibly versions newer than it), a
patch is required to support the spark-defaults.conf file in the
SPARK_CONF_DIR directory.  A patch for that is provided in the patches
directory.  It is being monitored via:

https://issues.apache.org/jira/browse/SPARK-2116
(Alternate approach at https://issues.apache.org/jira/browse/SPARK-2058 may suffice if it is accepted)

For Spark version 1.2.0, a recompile is no longer required, but
patching scripts is still necessary.

Patch - Alternate Log Dir & Conf Dir for Storm
----------------------------------------------

By default (up to atleast Storm 0.9.2) logs are stored in
STORM_HOME/logs and does not recognize the environment variable
STORM_LOG_DIR.

It is currently being tracked in the Jira:

https://issues.apache.org/jira/browse/STORM-279

In addition, Storm (up to atleast Storm 0.9.2) does not support
alternate config file directories other than its default of
STORM_HOME/conf.  Another patch is available in the 'patches'
directory to handle this.  It is currently being tracked by:

https://issues.apache.org/jira/browse/STORM-320

Patches to support alternate log and conf directories in Storm 0.9.2
are included in the patches directory.  As of this writing, a
re-compile with the patches are necessary.

After applying the patches to the Storm tree, a simple

mvn clean install -DskipTests=true
cd storm-dist/binary
mvn package

should net you a binary package with everything you need in the target
directory.

No patching is necessary with Storm 0.9.3.

Patch - Reducer Bug in Pig
--------------------------

There is a major bug in Pig 0.12.0 affecting reducer counts.

https://issues.apache.org/jira/browse/PIG-3512

It would be wise to recompile 0.12.0 with this fix.

Dependencies
------------

This project includes a script called 'magpie-expand-nodes' which is
used for hostrange expansion within the scripts.  It is a hack pieced
together from other scripts.

The preferred mechanism is to use the hostlist command in the
lua-hostlist project.  You can find lua-hostlist at 
https://github.com/grondo/lua-hostlist

The main magpie-run script will use 'magpie-expand-nodes' if it cannot
find 'hostlist' in its path.

To launch the daemons on the cluster nodes, magpie normally uses
srun provided by SLURM. However, with other resource allocation
managers (e.g.: Moab/Torque), the mechanism used is pdsh.
You can find pdsh at
https://code.google.com/p/pdsh/

Testing
-------

While I did some testing w/ Hadoop 1.2.1, b/c of the problem mentioned
above (HDFS-1835), I did most development and testing against Hadoop
2.1.0-beta.  I also regularly tested against Hadoop 2.2.0.  Nominal
testing was done with Hadoop 2.4.0 and 2.6.0.

Pig support was added/tested against version 0.12.0.  Nominal
testing was done with Pig 0.12.1 and 0.14.0.

Zookeeper support was added/tested against version 3.4.5.  Nominal
testing was done with Zookeeper 3.4.6.

UDA support was added/tested against uda-plugin 3.3.2-0 with Hadoop
2.2.0 and an appropriate patch for MAPREDUCE-5329.

Hbase was tested against hbase-0.96.1.1-hadoop2.  It has only been
tested against HDFS based file systems.  Nominal testing was done with
Hbase 0.98.3-hadoop2 and 0.98.9-hadoop2.

Spark was added/tested against spark-0.9.1 and spark-1.0.0.  Nominal
testing was done with Spark 1.2.0.

Storm was added/tested against storm-0.9.2.  Nominal testing was done
with Storm 0.9.3.

Contributions
-------------

Feel free to send me patches for new environment variables, new
adjustments, new optimization possibilities, alternate defaults that
you feel are better, etc.

Any patches you submit to me for fixes will be appreciated.  I am by
no means a bash expert ... in fact I'm quite bad at it.

Other Schedulers/Resource Managers
----------------------------------

While Slurm, Moab/Slurm, and Moab/Torque are the currently supported
schedulers/resource managers, there's no reason to believe that other
schedulers/resource managers couldn't be supported.  I'd gladly
welcome patches to support them.

To support another scheduler or resource manager, you'll want to make
your equivalent scheduler/resource manager header, similar to
submission-scripts/script-templates/magpie-slurm.  Then add an
appropriate new section to
sbumission-scripts/script-templates/Makefile and a new directory for
these new submission scripts.

If a new MAGPIE_SUBMISSION_TYPE is needed, you'll want to update
magpie-submission-convert and add appropriate input checks in
magpie-check-inputs.

I'd be glad to accept patches back for other schedulers/resource
managers.  Please send me a pull request.
 
Credit
------

Credit must be given to Kevin Regimbal @ PNNL.  Initial experiments
were done using heavily modified versions of scripts Kevin developed
for running Hadoop w/ Slurm & Lustre.  A number of the ideas from
Kevin's scripts continue in spirit in these scripts.

Special thanks to David Buttler who came up with the clever name for
this project.

Thanks
------

Thanks to the following for contributions

Felix-Antoine Fortin (felix-antoine.fortin@calculquebec.ca) - Msub/Torque support
