#!/bin/bash
#############################################################################
#  Copyright (C) 2013 Lawrence Livermore National Security, LLC.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Albert Chu <chu11@llnl.gov>
#  LLNL-CODE-644248
#  
#  This file is part of Magpie, scripts for running Hadoop on
#  traditional HPC systems.  For details, see <URL>.
#  
#  Magpie is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Magpie is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Magpie.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# This script sets up configuration files for jobs.  For the most
# part, it shouldn't be editted.  See job submission files for
# configuration details.

source ${MAGPIE_SCRIPTS_HOME}/magpie-submission-convert
source ${MAGPIE_SCRIPTS_HOME}/magpie-common-exports
source ${MAGPIE_SCRIPTS_HOME}/magpie-common-functions

if [ "${ZOOKEEPER_SETUP}" != "yes" ]
then
    exit 0
fi

# zookeepernoderank set if succeed and it's a Zookeeper slave
# Zookeeper master is only for setup/teardow management, not for actual Zookeeper
if ! Magpie_am_I_a_zookeeper_node
then
    exit 0
fi

if [ "${zookeepernoderank}X" != "X" ]
then 
    if [ "${ZOOKEEPER_FILESYSTEM_MODE}" == "networkfs" ]
    then
        # Setup node directory per node 
	zookeeperdatadirpath="${ZOOKEEPER_DATA_DIR}/node-${zookeepernoderank}"
	zookeeperdatadirpathsubst=`echo "${zookeeperdatadirpath}" | sed "s/\\//\\\\\\\\\//g"`
	
	mkdir -p ${zookeeperdatadirpath}
	if [ $? -ne 0 ] ; then
	    echo "mkdir failed making ${zookeeperdatadirpath}"
	    exit 1
	fi
    elif [ "${ZOOKEEPER_FILESYSTEM_MODE}" == "local" ]
    then
	zookeeperdatadirpath="${ZOOKEEPER_DATA_DIR}"
	zookeeperdatadirpathsubst=`echo "${zookeeperdatadirpath}" | sed "s/\\//\\\\\\\\\//g"`
	
	mkdir -p ${zookeeperdatadirpath}
	if [ $? -ne 0 ] ; then
	    echo "mkdir failed making ${zookeeperdatadirpath}"
	    exit 1
	fi
    fi
    
    echo "${zookeepernoderank}" > ${zookeeperdatadirpath}/myid
    
    if [ "${ZOOKEEPER_TICKTIME}X" != "X" ]
    then
	zookeeperticktime=${ZOOKEEPER_TICKTIME}
    else
	zookeeperticktime=2000
    fi
    
    if [ "${ZOOKEEPER_INITLIMIT}X" != "X" ]
    then
	zookeeperinitlimit=${ZOOKEEPER_INITLIMIT}
    else
	zookeeperinitlimit=10
    fi
    
    if [ "${ZOOKEEPER_SYNCLIMIT}X" != "X" ]
    then
	zookeepersynclimit=${ZOOKEEPER_SYNCLIMIT}
    else
	zookeepersynclimit=5
    fi
fi

#
# Get config files for setup
#

if [ "${ZOOKEEPER_CONF_FILES}X" == "X" ]
then
    zookeeperconffiledir=${MAGPIE_SCRIPTS_HOME}/conf
else
    zookeeperconffiledir=${ZOOKEEPER_CONF_FILES}
fi

zookeepercfg=${zookeeperconffiledir}/zoo.cfg
zookeeperenvsh=${zookeeperconffiledir}/zookeeper-env.sh

#
# Setup Zookeeper configuration files and environment files
#

sed -e "s/ZOOKEEPERDATADIR/${zookeeperdatadirpathsubst}/g" \
    -e "s/ZOOKEEPERTICKTIME/${zookeeperticktime}/g" \
    -e "s/ZOOKEEPERINITLIMIT/${zookeeperinitlimit}/g" \
    -e "s/ZOOKEEPERSYNCLIMIT/${zookeepersynclimit}/g" \
    -e "s/ZOOKEEPERCLIENTPORT/${ZOOKEEPER_CLIENT_PORT}/g" \
    $zookeepercfg > ${ZOOKEEPER_CONF_DIR}/zoo.cfg
    
zookeepernodes=`cat ${ZOOKEEPER_CONF_DIR}/zookeeper_slaves`

servercount=1
for zookeepernode in ${zookeepernodes}
do
    echo "server.${servercount}=${zookeepernode}:${ZOOKEEPER_PEER_PORT}:${ZOOKEEPER_LEADER_PORT}" >> ${ZOOKEEPER_CONF_DIR}/zoo.cfg
    servercount=$((servercount+1))
done

zookeeperjavahomesubst=`echo "${JAVA_HOME}" | sed "s/\\//\\\\\\\\\//g"`
zookeeperlogdirsubst=`echo "${ZOOKEEPER_LOG_DIR}" | sed "s/\\//\\\\\\\\\//g"`
zookeeperconfdirsubst=`echo "${ZOOKEEPER_CONF_DIR}" | sed "s/\\//\\\\\\\\\//g"`
zookeeperhomesubst=`echo "${ZOOKEEPER_HOME}" | sed "s/\\//\\\\\\\\\//g"`
magpiescriptshome=`echo "${MAGPIE_SCRIPTS_HOME}" | sed "s/\\//\\\\\\\\\//g"`

sed -e "s/MAGPIEJAVAHOME/${zookeeperjavahomesubst}/g" \
    -e "s/ZOOKEEPERLOGDIR/${zookeeperlogdirsubst}/g" \
    -e "s/ZOOKEEPERCONFDIR/${zookeeperconfdirsubst}/g" \
    -e "s/ZOOKEEPERHOME/${zookeeperhomesubst}/g" \
    -e "s/MAGPIESCRIPTSHOME/${magpiescriptshome}/g" \
    $zookeeperenvsh > ${ZOOKEEPER_CONF_DIR}/zookeeper-env.sh

if [ "${MAGPIE_REMOTE_CMD:-ssh}" != "ssh" ]
then
    echo "export ZOOKEEPER_SSH_CMD=\"${MAGPIE_REMOTE_CMD}\"" >> ${ZOOKEEPER_CONF_DIR}/zookeeper-env.sh
fi
if [ "${MAGPIE_REMOTE_CMD_OPTS}X" != "X" ]
then
    echo "export ZOOKEEPER_SSH_OPTS=\"${MAGPIE_REMOTE_CMD_OPTS}\"" >> ${ZOOKEEPER_CONF_DIR}/zookeeper-env.sh
fi

cat ${zookeeperconffiledir}/zookeeper.log4j.properties > ${ZOOKEEPER_CONF_DIR}/log4j.properties

exit 0
