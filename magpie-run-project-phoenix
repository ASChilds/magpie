#!/bin/bash
#############################################################################
#  Copyright (C) 2013-2015 Lawrence Livermore National Security, LLC.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Albert Chu <chu11@llnl.gov>
#  LLNL-CODE-644248
#  
#  This file is part of Magpie, scripts for running Hadoop on
#  traditional HPC systems.  For details, see https://github.com/llnl/magpie.
#  
#  Magpie is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Magpie is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Magpie.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# These are functions to be called by magpie-run

source ${MAGPIE_SCRIPTS_HOME}/magpie-constants
source ${MAGPIE_SCRIPTS_HOME}/magpie-exports-submission-type
source ${MAGPIE_SCRIPTS_HOME}/magpie-exports-dirs
source ${MAGPIE_SCRIPTS_HOME}/magpie-exports-user
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-node-identification
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-job-management
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-log

Magpie_run_start_phoenix () {
    if [ "${PHOENIX_SETUP}" == "yes" ] && [ "${magpie_run_prior_startup_successful}" == "true" ]
    then
        if [ "${magpie_run_hbase_setup_successful}" == "0" ]
        then
            Magpie_output_internal_error "Attempt to setup Phoenix without Hbase being setup"
            magpie_run_phoenix_should_be_torndown=0
            magpie_run_phoenix_setup_successful=0
            return 1
        fi

        cd ${PHOENIX_HOME}

        if [ ${PHOENIX_MODE} == "server" ]
        then
            # Make variables unspecified for launching
            Magpie_make_all_local_dirs_unspecified

            echo "Starting Phoenix Queryserver"
            ${MAGPIE_SCRIPTS_HOME}/bin/magpie-phoenix-start-all.sh 
            
            Magpie_make_all_local_dirs_node_specific

            # My rough estimate for setup time is 30 seconds
            local sleepwait=30

            echo "Waiting ${sleepwait} seconds to allow Phoenix daemons to setup"
            sleep ${sleepwait}
            magpie_run_total_sleep_wait=`expr ${magpie_run_total_sleep_wait} + ${sleepwait}`
        fi

        echo "*******************************************************"
        echo "*"
        echo "* Phoenix Information"
        echo "*"
        echo "* To access phoenix directly, you'll want to:"
        echo "*"
        echo "*   ${MAGPIE_REMOTE_CMD:-ssh}${MAGPIE_REMOTE_CMD_OPTS:+" "}${MAGPIE_REMOTE_CMD_OPTS} ${HBASE_MASTER_NODE}"
        if echo $MAGPIE_SHELL | grep -q csh
        then
            echo "*   setenv JAVA_HOME \"${JAVA_HOME}\""
            echo "*   setenv PHOENIX_HOME \"${PHOENIX_HOME}\""
            echo "*   setenv HBASE_CONF_DIR \"${HBASE_CONF_DIR}\""
        else
            echo "*   export JAVA_HOME=\"${JAVA_HOME}\""
            echo "*   export PHOENIX_HOME=\"${PHOENIX_HOME}\""
            echo "*   export HBASE_CONF_DIR=\"${HBASE_CONF_DIR}\""
        fi
        echo "*"
        echo "* Then you can do as you please.  To interact with Phoenix you can use:"
        echo "*" 
        echo "*   \$PHOENIX_HOME/${phoenixcmdprefix}/sqlline.py"
        if [ "${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}X" != "X" ]
        then
            echo "*"
            echo "* If running interactively, sourcing"
            echo "*"
            echo "* ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}"
            echo "*"
            echo "* will set most common environment variables for your job."
        fi
        echo "*" 
        echo "*******************************************************"

        if [ "${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}X" != "X" ]
        then
            if echo $MAGPIE_SHELL | grep -q csh
            then
                echo "setenv PHOENIX_HOME \"${PHOENIX_HOME}\"" >> ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}
            else
                echo "export PHOENIX_HOME=\"${PHOENIX_HOME}\"" >> ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}
            fi
            echo "" >> ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}
        fi

        if [ ${PHOENIX_MODE} == "server" ]
        then
            local magpiestartuptimeseconds=`expr ${magpie_startup_time_value} \* 60`

            if [ "${magpie_run_total_sleep_wait}" -lt "${magpiestartuptimeseconds}" ]
            then  
            # Could be more dynamic w/ slurm call to determine current
            # run time, but probably is sufficient for this trivial
            # part.  Minimally, have to leave the magpie_run_total_sleep_wait code
            # around for non-slurm systems.
                local phoenixmaxwaitseconds=`expr ${magpiestartuptimeseconds} - ${magpie_run_total_sleep_wait}`
                
                if [ "${phoenixmaxwaitseconds}" -lt 30 ]
                then
                    phoenixmaxwaitseconds=30
                fi
                
                local phoenixmaxwaittimes=`expr ${phoenixmaxwaitseconds} \/ 30`
            else
                local phoenixrmaxwaittimes=1
            fi
            
            cd ${PHOENIX_HOME}

            local phoenixcameup=0
            
            for i in `seq 1 ${phoenixmaxwaittimes}`
            do
                local serverschk=0
                local serversup=0
                for server in `cat ${PHOENIX_CONF_DIR}/regionservers`;
                do
                    serverschk=`expr ${serverschk} + 1`
                    local serverisup=`${MAGPIE_REMOTE_CMD:-ssh} ${MAGPIE_REMOTE_CMD_OPTS} $server ps -ef | grep -c queryserver.py`
                    if [ "${serverisup}" -gt "0" ] ;
                    then 
                        serversup=`expr ${serversup} + 1`
                    fi
                done

                echo "$serversup/$serverschk Queryservers are up."
                if [ "$serverschk" -eq "$serversup" ]
                then 
                    phoenixcameup=1
                    break
                fi

                echo "Waiting 30 more seconds for Queryservers to come up"
                sleep 30
                magpie_run_total_sleep_wait=`expr ${magpie_run_total_sleep_wait} + 30`
            done
            
            if [ "${phoenixcameup}" == "0" ]
            then
                echo "Not all Phoenix Queryservers came up, setup problem or maybe need to increase MAGPIE_STARTUP_TIME"
                magpie_run_phoenix_should_be_torndown=1
                magpie_run_phoenix_setup_successful=0
                magpie_run_prior_startup_successful=false
            else
                magpie_run_phoenix_should_be_torndown=1
                magpie_run_phoenix_setup_successful=1
            fi
        else
            magpie_run_phoenix_should_be_torndown=1
            magpie_run_phoenix_setup_successful=1
        fi
    else
        magpie_run_phoenix_should_be_torndown=0
        magpie_run_phoenix_setup_successful=1
    fi
}

Magpie_run_phoenix () {
    if [ "${PHOENIX_MODE}" == "performanceeval" ]
    then
        echo "*******************************************************"
        echo "* Running Performance Evaluation"
        echo "*******************************************************"
        ${MAGPIE_SCRIPTS_HOME}/magpie-run-execute script ${MAGPIE_SCRIPTS_HOME}/magpie-run-job-phoenix-performanceeval &
        local scriptpid=$!
        Magpie_wait_script_sigusr2_on_job_timeout ${scriptpid}
    elif [ "${PHOENIX_MODE}" == "script" ]
    then
        echo "*******************************************************"
        echo "* Executing script $PHOENIX_SCRIPT_PATH"
        echo "*******************************************************"
        ${MAGPIE_SCRIPTS_HOME}/magpie-run-execute script "${PHOENIX_HOME}/${phoenixcmdprefix}/sqlline.py ${PHOENIX_SCRIPT_OPTS} ${PHOENIX_SCRIPT_PATH}" &
        local scriptpid=$!
        Magpie_wait_script_sigusr2_on_job_timeout ${scriptpid}
    elif [ "${PHOENIX_MODE}" == "interactive" ] 
    then
        echo "*******************************************************"
        echo "* Entering Phoenix ${PHOENIX_MODE} mode"
        echo "*******************************************************"
        ${MAGPIE_SCRIPTS_HOME}/magpie-run-execute interactive &
        local scriptpid=$!
        wait $scriptpid
    fi
}

Magpie_run_stop_phoenix () {
    if [ "${magpie_run_hbase_teardown_complete}" == "1" ]
    then
        Magpie_output_internal_warning "tearing down Phoenix after Hbase"
    fi

    if [ "${PHOENIX_SETUP}" == "yes" ] && [ "${magpie_run_phoenix_should_be_torndown}" == "1" ]
    then
        if [ ${PHOENIX_MODE} == "server" ]
        then
            cd ${PHOENIX_HOME}
            
            # Make variables unspecified for shutdown
            Magpie_make_all_local_dirs_unspecified
            
            echo "Stopping Phoenix"
            ${MAGPIE_SCRIPTS_HOME}/bin/magpie-phoenix-stop-all.sh
            
            # Make variables specific now within Magpie
            Magpie_make_all_local_dirs_node_specific
        fi
    fi
    magpie_run_phoenix_teardown_complete=1
}
