#!/bin/bash
#############################################################################
#  Copyright (C) 2013-2015 Lawrence Livermore National Security, LLC.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Albert Chu <chu11@llnl.gov>
#  LLNL-CODE-644248
#  
#  This file is part of Magpie, scripts for running Hadoop on
#  traditional HPC systems.  For details, see https://github.com/llnl/magpie.
#  
#  Magpie is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Magpie is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Magpie.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# This script is the core processing script for setting up daemons and
# running jobs.  For the most part, it shouldn't be editted.  See
# job submission files for configuration details.

source ${MAGPIE_SCRIPTS_HOME}/magpie-submission-convert
source ${MAGPIE_SCRIPTS_HOME}/magpie-common-exports
source ${MAGPIE_SCRIPTS_HOME}/magpie-common-functions
source ${MAGPIE_SCRIPTS_HOME}/magpie-run-common-functions
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-log
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-misc-external
source ${MAGPIE_SCRIPTS_HOME}/magpie-variable-conversion
source ${MAGPIE_SCRIPTS_HOME}/magpie-generated-exports

Magpie_run_start_phoenix () {
    if [ "${PHOENIX_SETUP}" == "yes" ] && [ "${prior_setup_successful}" == "true" ]
    then
	if [ "${hbase_setup_successful}" == "0" ]
	then
	    Magpie_output_internal_error "Attempt to setup Phoenix without Hbase being setup"
	    phoenix_should_be_torndown=0
	    phoenix_setup_successful=0
	    return 1
	fi

	cd ${PHOENIX_HOME}

	if [ ${PHOENIX_MODE} == "server" ]
	then
            # Make variables unspecified for launching
	    Magpie_make_all_local_dirs_unspecified

	    echo "Starting Phoenix Queryserver"
            ${MAGPIE_SCRIPTS_HOME}/bin/magpie-phoenix.sh start 
	    
	    Magpie_make_all_local_dirs_node_specific

            # My rough estimate for setup time is 30 seconds
            local sleepwait=30

	    echo "Waiting ${sleepwait} seconds to allow Phoenix daemons to setup"
	    sleep ${sleepwait}
	    totalsleepwait=`expr ${totalsleepwait} + ${sleepwait}`
	fi

	echo "*******************************************************"
	echo "*"
	echo "* Phoenix Information"
	echo "*"
	echo "* To access phoenix directly, you'll want to:"
	echo "*   ${MAGPIE_REMOTE_CMD:-ssh}${MAGPIE_REMOTE_CMD_OPTS:+" "}${MAGPIE_REMOTE_CMD_OPTS} ${HBASE_MASTER_NODE}"
	if echo $MAGPIE_SHELL | grep -q csh
	then
	    echo "*   setenv HBASE_CONF_DIR \"${HBASE_CONF_DIR}\""
	else
	    echo "*   export HBASE_CONF_DIR=\"${HBASE_CONF_DIR}\""
	fi
	echo "*   cd $PHOENIX_HOME"
	echo "*"
	echo "* Then you can do as you please.  To interact with Phoenix you can use:"
	echo "*" 
	echo "*   ${phoenixcmdprefix}/sqlline.py"

	echo "*" 
	echo "* Some additional environment variables you may sometimes wish to set"
	echo "*" 
	if echo $MAGPIE_SHELL | grep -q csh
	then
	    echo "*   setenv JAVA_HOME \"${JAVA_HOME}\""
            echo "*   setenv PHOENIX_HOME \"${PHOENIX_HOME}\""
	else
	    echo "*   export JAVA_HOME=\"${JAVA_HOME}\""
            echo "*   export PHOENIX_HOME=\"${PHOENIX_HOME}\""
	fi

	if [ "${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}X" != "X" ]
	then
	    echo "*"
	    echo "* If running interactively, sourcing"
	    echo "*"
	    echo "* ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}"
	    echo "*"
	    echo "* will set most common environment variables for your job."
	fi
	echo "*" 
	echo "*******************************************************"

	if [ "${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}X" != "X" ]
	then
	    if echo $MAGPIE_SHELL | grep -q csh
	    then
		echo "setenv PHOENIX_HOME \"${PHOENIX_HOME}\"" >> ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}
	    else
		echo "export PHOENIX_HOME=\"${PHOENIX_HOME}\"" >> ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}
	    fi
	    echo "" >> ${MAGPIE_ENVIRONMENT_VARIABLE_SCRIPT}
	fi

	if [ ${PHOENIX_MODE} == "server" ]
	then
	    local magpiestartuptimeseconds=`expr ${MAGPIE_STARTUP_TIME} \* 60`

	    if [ "${totalsleepwait}" -lt "${magpiestartuptimeseconds}" ]
	    then  
	    # Could be more dynamic w/ slurm call to determine current
	    # run time, but probably is sufficient for this trivial
	    # part.  Minimally, have to leave the totalsleepwait code
	    # around for non-slurm systems.
		local phoenixmaxwaitseconds=`expr ${magpiestartuptimeseconds} - ${totalsleepwait}`
		
		if [ "${phoenixmaxwaitseconds}" -lt 30 ]
		then
		    phoenixmaxwaitseconds=30
		fi
		
		local phoenixmaxwaittimes=`expr ${phoenixmaxwaitseconds} \/ 30`
	    else
		local phoenixrmaxwaittimes=1
	    fi
	    
	    cd ${PHOENIX_HOME}

	    local phoenixcameup=0
	    
	    for ((i = 1; i <= ${phoenixmaxwaittimes}; i++)); do

		local serverschk=0
		local serversup=0
		for server in `cat ${PHOENIX_CONF_DIR}/regionservers`;
		do
                    serverschk=$((serverschk+1))
                    if [ $(${MAGPIE_REMOTE_CMD:-ssh} ${MAGPIE_REMOTE_CMD_OPTS} $server ps -ef | grep -c queryserver.py) -gt "0" ] ;
                    then 
			serversup=$((serversup+1))
                    fi
		done

		echo "$serversup/$serverschk Queryservers are up."
		if [ "$serverschk" -eq "$serversup" ]
		then 
                    phoenixcameup=1
                    break
		fi

		echo "Waiting 30 more seconds for Queryservers to come up"
		sleep 30
		totalsleepwait=`expr ${totalsleepwait} + 30`
	    done
	    
	    if [ "${phoenixcameup}" == "0" ]
	    then
		echo "Not all Phoenix Queryservers came up, setup problem or maybe need to increase MAGPIE_STARTUP_TIME"
		phoenix_should_be_torndown=1
		phoenix_setup_successful=0
		prior_setup_successful=false
	    else
		phoenix_should_be_torndown=1
		phoenix_setup_successful=1
	    fi
	else
	    phoenix_should_be_torndown=1
	    phoenix_setup_successful=1
	fi
    else
	phoenix_should_be_torndown=0
	phoenix_setup_successful=1
    fi
}

Magpie_run_stop_phoenix () {
    if [ "${hbase_teardown_complete}" == "1" ]
    then
	Magpie_output_internal_warning "tearing down Phoenix after Hbase"
    fi

    if [ "${PHOENIX_SETUP}" == "yes" ] && [ "${phoenix_should_be_torndown}" == "1" ]
    then
	if [ ${PHOENIX_MODE} == "server" ]
	then
	    cd ${PHOENIX_HOME}
	    
	    # Make variables unspecified for shutdown
	    Magpie_make_all_local_dirs_unspecified
	    
	    echo "Stopping Phoenix"
            ${MAGPIE_SCRIPTS_HOME}/bin/magpie-phoenix.sh stop
	    
            # Make variables specific now within Magpie
	    Magpie_make_all_local_dirs_node_specific
	fi
    fi
    phoenix_teardown_complete=1
}
