#!/bin/bash
#############################################################################
#  Copyright (C) 2013-2015 Lawrence Livermore National Security, LLC.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Albert Chu <chu11@llnl.gov>
#  LLNL-CODE-644248
#  
#  This file is part of Magpie, scripts for running Hadoop on
#  traditional HPC systems.  For details, see https://github.com/llnl/magpie.
#  
#  Magpie is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Magpie is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Magpie.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# Export common functions for running jobs
#
# This is used by scripts, don't edit this
#
# Similar to magpie-common-functions, but specific to running jobs

source ${MAGPIE_SCRIPTS_HOME}/magpie-exports-submission-type
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-log
source ${MAGPIE_SCRIPTS_HOME}/magpie-lib-misc-external
source ${MAGPIE_SCRIPTS_HOME}/magpie-exports-core
source ${MAGPIE_SCRIPTS_HOME}/magpie-variable-conversion

Magpie_job_time_minutes () {
    # slurmsbatch & msubslurm legacy
    if [ "${MAGPIE_SUBMISSION_TYPE}" == "slurmsbatch" ] \
	|| [ "${MAGPIE_SUBMISSION_TYPE}" == "sbatchsrun" ] \
	|| [ "${MAGPIE_SUBMISSION_TYPE}" == "msubslurm" ] \
	|| [ "${MAGPIE_SUBMISSION_TYPE}" == "msubslurmpdsh" ]
    then
	local timeleftwalltime=`squeue -j ${SLURM_JOB_ID} -h -o %L`
	if [ "${timeleftwalltime}" == "NOT_SET" ] || [ "${timeleftwalltime}" == "UNLIMITED" ]
	then
            walltimetominutes=`expr ${MAGPIE_TIMELIMIT_MINUTES} - ${MAGPIE_STARTUP_TIME}`
	else
            Magpie_walltime_to_minutes ${timeleftwalltime}
	fi
        jobtimeminutes=`expr ${walltimetominutes} - ${MAGPIE_SHUTDOWN_TIME}`
    else
	local timeleftminutes=`expr ${MAGPIE_TIMELIMIT_MINUTES} - ${MAGPIE_STARTUP_TIME}`
	jobtimeminutes=`expr ${timeleftminutes} - ${MAGPIE_SHUTDOWN_TIME}`
    fi
}

Magpie_job_time_seconds () {
    Magpie_job_time_minutes
    jobtimeseconds=`expr ${jobtimeminutes}  \* 60`
}

Magpie_wait_script_signal_on_timeout () {
    local scriptpid=$1
    local timeoutminutes=$2
    local signalnumber=$3
    # We sleep in 30 second chunks, so times 2
    local scriptsleepiterations=`expr ${timeoutminutes}  \* 2`
    local scriptexitted=0

    for ((i = 1; i <= ${scriptsleepiterations}; i++)); do
	if kill -0 ${scriptpid} 2&> /dev/null
	then
	    sleep 30
	else
	    scriptexitted=1
	    break
	fi
    done

    if [ "${scriptexitted}" == "0" ]
    then
	echo "Killing script, did not exit within time limit"
	kill -s ${signalnumber} ${scriptpid}
	return 1
    fi

    return 0
}

Magpie_wait_script_kill_on_job_timeout () {
    local scriptpid=$1

    # Will set jobtimeminutes
    Magpie_job_time_minutes

    Magpie_wait_script_signal_on_timeout $scriptpid $jobtimeminutes 9

    return $?
}

Magpie_wait_script_sigusr2_on_job_timeout () {
    local scriptpid=$1

    # Will set jobtimeminutes
    Magpie_job_time_minutes

    Magpie_wait_script_signal_on_timeout $scriptpid $jobtimeminutes 12

    return $?
}

Magpie_get_networkedhdfspath () {
    if [ "$HADOOP_FILESYSTEM_MODE" == "hdfsoverlustre" ]
    then
	networkedhdfspath=${HADOOP_HDFSOVERLUSTRE_PATH}
    elif [ "$HADOOP_FILESYSTEM_MODE" == "hdfsovernetworkfs" ]
    then
	networkedhdfspath=${HADOOP_HDFSOVERNETWORKFS_PATH}
    else
	Magpie_output_internal_error "Magpie_get_networkedhdfspath called without HDFS networked path set used" 
    fi
    
    if [ "${HADOOP_PER_JOB_HDFS_PATH}" == "yes" ]
    then
	networkedhdfspath="$networkedhdfspath/${MAGPIE_JOB_ID}"
    fi
}

Magpie_get_hdfsstoredversionpath () {
    Magpie_get_networkedhdfspath
    hdfsstoredversionpath=${networkedhdfspath}/magpie.hadoop-version
}

Magpie_get_hdfsstorednodecountpath () {
    Magpie_get_networkedhdfspath
    hdfsstorednodecountpath=${networkedhdfspath}/magpie.node-count
}
