#!/bin/bash
#############################################################################
#  Copyright (C) 2013 Lawrence Livermore National Security, LLC.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Albert Chu <chu11@llnl.gov>
#  LLNL-CODE-644248
#  
#  This file is part of Magpie, scripts for running Hadoop on
#  traditional HPC systems.  For details, see <URL>.
#  
#  Magpie is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Magpie is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Magpie.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# This script is the core processing script for setting up daemons and
# running jobs.  For the most part, it shouldn't be editted.  See
# magpie.sbatch for configuration details.

source ${MAGPIE_SCRIPTS_HOME}/magpie-submission-convert
source ${MAGPIE_SCRIPTS_HOME}/magpie-common-exports

if ! Magpie_am_I_master
then
    exit 0
fi

#
# Setup ZooKeeper
#

if [ "${ZOOKEEPER_SETUP}" == "yes" ]
then
    if [ "${ZOOKEEPER_MODE}" != "setuponly" ]
    then
	echo "Starting Zookeeper"
	zookeepernodes=`cat ${ZOOKEEPER_CONF_DIR}/zookeeper_slaves`
	
	nodecount=0
	for zookeepernode in ${zookeepernodes}
	do
	    ${magpieremotecmd} ${MAGPIE_REMOTE_CMD_OPTS} ${zookeepernode} ${MAGPIE_SCRIPTS_HOME}/bin/magpie-launch-zookeeper.sh ${ZOOKEEPER_CONF_DIR} ${ZOOKEEPER_HOME} start
	    nodecount=$((nodecount+1))
	done

        # My rough estimate for setup time is 30 seconds per 128 nodes
	sleepwait=`expr ${nodecount} \/ 128 \* 30`
	if [ ${sleepwait} -lt 30 ]
	then
            sleepwait=30
	fi
	echo "Waiting ${sleepwait} seconds to allow Zookeeper daemons to setup"
	sleep ${sleepwait}
    fi

    echo "*******************************************************"
    echo "*"
    echo "* Zookeeper Information"
    echo "*"
    if [ "${ZOOKEEPER_MODE}" == "setuponly" ]
    then
 	echo "* To setup, you probably want to run:" 
	echo "*   ${magpieremotecmd} ${ZOOKEEPER_MASTER_NODE}"
	if echo $SHELL | grep -q csh
	then
	    echo "*   setenv ZOOCFGDIR \"${ZOOKEEPER_CONF_DIR}\""
	else
	    echo "*   export ZOOCFGDIR=\"${ZOOKEEPER_CONF_DIR}\""
	fi
	echo "*   cd $MAGPIE_SCRIPTS_HOME"
	echo "*   bin/magpie-zookeeper.sh start"
	echo "*" 
    fi
    echo "* To end/cleanup your session, kill the daemons via:"
    echo "*" 
    echo "*   ${MAGPIE_SCRIPTS_HOME}/bin/magpie-zookeeper.sh stop"
    echo "*" 
    echo "* Some additional environment variables you may sometimes wish to set"
    echo "*" 
    if echo $SHELL | grep -q csh
    then
	echo "*   setenv JAVA_HOME \"${JAVA_HOME}\""
	echo "*   setenv ZOOKEEPER_HOME \"${ZOOKEEPER_HOME}\""
    else
	echo "*   export JAVA_HOME=\"${JAVA_HOME}\""
	echo "*   export ZOOKEEPER_HOME=\"${ZOOKEEPER_HOME}\""
    fi
    echo "*" 
    echo "*******************************************************"
fi

#
# Setup Hadoop
#

if [ "${HADOOP_SETUP}" == "yes" ]
then
    cd ${HADOOP_HOME}

    if [ ${HADOOP_MODE} != "setuponly" ]
    then
	echo "Starting hadoop"
	if [ "$HADOOP_FILESYSTEM_MODE" == "hdfs" ] \
	    || [ "$HADOOP_FILESYSTEM_MODE" == "hdfsoverlustre" ] \
	    || [ "$HADOOP_FILESYSTEM_MODE" == "hdfsovernetworkfs" ]
	then
	    ${hadoopscriptprefix}/start-dfs.sh 
	fi
	
	if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
	then
	    ${hadoopscriptprefix}/start-mapred.sh
	fi
	
	if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
	then
	    ${hadoopscriptprefix}/start-yarn.sh
	fi
	
        # My rough estimate for setup time is 30 seconds per 128 nodes
	sleepwait=`expr ${HADOOP_SLAVE_COUNT} \/ 128 \* 30`
	if [ ${sleepwait} -lt 30 ]
	then
            sleepwait=30
	fi
	echo "Waiting ${sleepwait} seconds to allows Hadoop daemons to setup"
	sleep ${sleepwait}
    fi

    echo "*******************************************************"
    echo "*"
    echo "* Hadoop Information"
    echo "*"
    echo "* You can view your Hadoop status by launching a web browser and pointing to ..."
    echo "*"
    if [ ${HADOOP_SETUP_TYPE}  == "MR1" ]
    then
	echo "* Jobtracker: http://${HADOOP_MASTER_NODE}:50030"
    elif [ ${HADOOP_SETUP_TYPE}  == "MR2" ]
    then
	echo "* Yarn Resource Manager: http://${HADOOP_MASTER_NODE}:8088"
	echo "*"
	echo "* Job History Server: http://${HADOOP_MASTER_NODE}:19888"
    fi
    if [ ${HADOOP_FILESYSTEM_MODE} == "hdfs" ] \
	|| [ ${HADOOP_FILESYSTEM_MODE} == "hdfsoverlustre" ] \
	|| [ ${HADOOP_FILESYSTEM_MODE} == "hdfsovernetworkfs" ]
    then
	echo "*" 
	echo "* HDFS Namenode: http://${HADOOP_MASTER_NODE}:50070"
    fi
    echo "*" 
    echo "* To access Hadoop directly, you'll want to:"
    echo "*   ${magpieremotecmd} ${HADOOP_MASTER_NODE}"
    if echo $SHELL | grep -q csh
    then
	echo "*   setenv HADOOP_CONF_DIR \"${HADOOP_CONF_DIR}\""
    else
	echo "*   export HADOOP_CONF_DIR=\"${HADOOP_CONF_DIR}\""
    fi
    echo "*   cd $HADOOP_HOME"
    echo "*"
    echo "* Then you can do as you please.  For example to interact with the Hadoop filesystem:"
    echo "*" 
    echo "*   bin/hadoop fs ..."

    if [ "${HADOOP_MODE}" == "interactive" ] \
	&& ([ "${HADOOP_SETUP_TYPE}" == "MR1" ] \
	|| [ "${HADOOP_SETUP_TYPE}" == "MR2" ])
    then
	echo "*" 
	echo "* To launch jobs you'll want to:"
	echo "*" 
	echo "*   bin/hadoop jar ..."
	echo "*" 
    fi

    if [ "${HADOOP_MODE}" == "setuponly" ]
    then
	echo "*" 
 	echo "* To setup, you probably want to run:" 
	echo "*"
	if [ "$HADOOP_FILESYSTEM_MODE" == "hdfs" ] \
	    || [ "$HADOOP_FILESYSTEM_MODE" == "hdfsoverlustre" ] \
	    || [ "$HADOOP_FILESYSTEM_MODE" == "hdfsovernetworkfs" ]
	then
	    echo "*   ${hadoopscriptprefix}/start-dfs.sh" 
	fi
	if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
	then
	    echo "*   ${hadoopscriptprefix}/start-mapred.sh"
	fi
	if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
	then
	    echo "*   ${hadoopscriptprefix}/start-yarn.sh"
	fi
	if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
	then
	    echo "*   ${hadoopscriptprefix}/start-jobhistoryserver.sh"
	fi
	if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
	then
	    echo "*   ${hadoopscriptprefix}/mr-jobhistory-daemon.sh start historyserver"
	fi
    fi

    echo "*" 
    echo "* To end/cleanup your session, kill the daemons via:"
    echo "*" 
    if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
    then
	echo "*   ${hadoopscriptprefix}/stop-mapred.sh"
    fi
    if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
    then
	echo "*   ${hadoopscriptprefix}/stop-yarn.sh"
    fi
    if [ "$HADOOP_FILESYSTEM_MODE" == "hdfs" ] \
	|| [ "$HADOOP_FILESYSTEM_MODE" == "hdfsoverlustre" ] \
	|| [ "$HADOOP_FILESYSTEM_MODE" == "hdfsovernetworkfs" ]
    then
	echo "*   ${hadoopscriptprefix}/stop-dfs.sh"
    fi
    if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
    then
	echo "*   ${hadoopscriptprefix}/stop-jobhistoryserver.sh"
    fi
    if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
    then
	echo "*   ${hadoopscriptprefix}/mr-jobhistory-daemon.sh stop historyserver"
    fi
    echo "*" 
    echo "* Some additional environment variables you may sometimes wish to set"
    echo "*" 
    if echo $SHELL | grep -q csh
    then
	echo "*   setenv JAVA_HOME \"${JAVA_HOME}\""
	echo "*   setenv HADOOP_HOME \"${HADOOP_HOME}\""
    else
	echo "*   export JAVA_HOME=\"${JAVA_HOME}\""
	echo "*   export HADOOP_HOME=\"${HADOOP_HOME}\""
    fi
    if [ "${PIG_SETUP}" == "yes" ]
    then
	if echo $SHELL | grep -q csh
	then
	    echo "*   setenv PIG_HOME \"${PIG_HOME}\""
	    echo "*   setenv PIG_CONF_DIR \"${PIG_CONF_DIR}\""
	else
	    echo "*   export PIG_HOME=\"${PIG_HOME}\""
	    echo "*   export PIG_CONF_DIR=\"${PIG_CONF_DIR}\""
	fi
    fi
    echo "*" 
    echo "*******************************************************"

    # Ensure namenode isn't in safe mode.
    #
    # We do not use "-safemode wait", b/c we want to inform the user
    # as we're waiting.
    if [ ${HADOOP_MODE} != "setuponly" ] \
	&& ([ "$HADOOP_FILESYSTEM_MODE" == "hdfs" ] \
	|| [ "$HADOOP_FILESYSTEM_MODE" == "hdfsoverlustre" ] \
	|| [ "$HADOOP_FILESYSTEM_MODE" == "hdfsovernetworkfs" ])
    then
	namenodemaxwaitseconds=`expr ${MAGPIE_STARTUP_TIME} \* 60 - ${sleepwait}`
	namenodemaxwaittimes=`expr ${namenodemaxwaitseconds} \/ 30`
	
	cd ${HADOOP_HOME}
	
	for ((i = 1; i <= ${namenodemaxwaittimes}; i++)); do
	    
	    bin/${dfsadminscript} dfsadmin -safemode get 2>&1 | grep -q -i "off"
	    if [ $? -eq 0 ]
	    then
		break
	    fi
	    echo "Waiting 30 more seconds for namenode to exit safe mode"
	    sleep 30
	done
	
	bin/${dfsadminscript} dfsadmin -safemode get 2>&1 | grep -q -i "off"
	if [ $? -ne 0 ] 
	then
	    echo "Namenode never exited safe mode, setup problem or maybe need to increase MAGPIE_STARTUP_TIME"
	    hadoopsetuppass=0
	else
	    hadoopsetuppass=1
	fi
    else
	hadoopsetuppass=1
    fi

    # Setup job history server after namenode comes up, it may need to
    # write/create in HDFS
    if [ ${HADOOP_MODE} != "setuponly" ] && [ "${hadoopsetuppass}" == "1" ]
    then
	if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
	then
	    ${hadoopscriptprefix}/start-jobhistoryserver.sh
	fi
	
	if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
	then
	    ${hadoopscriptprefix}/mr-jobhistory-daemon.sh start historyserver
	fi
    fi
fi

#
# Setup Hbase
#

if [ "${HBASE_SETUP}" == "yes" ]
then
    cd ${HBASE_HOME}

    if [ ${HBASE_MODE} != "setuponly" ] && [ "${hadoopsetuppass}" == "1" ]
    then
	echo "Starting hbase"
	${hbasescriptprefix}/start-hbase.sh
	
        # My rough estimate for setup time is 30 seconds per 128 nodes
	sleepwait=`expr ${HBASE_REGIONSERVER_COUNT} \/ 128 \* 30`
	if [ ${sleepwait} -lt 30 ]
	then
            sleepwait=30
	fi
	echo "Waiting ${sleepwait} seconds to allow Hbase daemons to setup"
	sleep ${sleepwait}
    fi

    echo "*******************************************************"
    echo "*"
    echo "* Hbase Information"
    echo "*"
    echo "* You can view your Hbase status by launching a web browser and pointing to ..."
    echo "*"
    echo "* Hbase Master: http://${HADOOP_MASTER_NODE}:60010"
    echo "*" 
    echo "* To access Hbase directly, you'll want to:"
    echo "*   ${magpieremotecmd} ${HBASE_MASTER_NODE}"
    if echo $SHELL | grep -q csh
    then
	echo "*   setenv HBASE_CONF_DIR \"${HBASE_CONF_DIR}\""
    else
	echo "*   export HBASE_CONF_DIR=\"${HBASE_CONF_DIR}\""
    fi
    echo "*   cd $HBASE_HOME"
    echo "*"
    echo "* Then you can do as you please.  For example to interact with the Hadoop filesystem:"
    echo "*" 
    echo "*   ${hbasescriptprefix}/hbase shell"

    if [ "${HBASE_MODE}" == "setuponly" ]
    then
	echo "*" 
	echo "* To setup, you probably want to run:" 
	echo "*"
	echo "*   ${hbasescriptprefix}/start-hbase.sh" 
    fi

    echo "*" 
    echo "* To end/cleanup your session, kill the daemons via:"
    echo "*" 
    echo "*   ${hbasescriptprefix}/stop-hbase.sh"
    echo "*" 
    echo "* Some additional environment variables you may sometimes wish to set"
    echo "*" 
    if echo $SHELL | grep -q csh
    then
	echo "*   setenv JAVA_HOME \"${JAVA_HOME}\""
	echo "*   setenv HBASE_HOME \"${HBASE_HOME}\""
    else
	echo "*   export JAVA_HOME=\"${JAVA_HOME}\""
	echo "*   export HBASE_HOME=\"${HBASE_HOME}\""
    fi
    echo "*" 
    echo "*******************************************************"
fi

if [ "${MAGPIE_JOB_TYPE}" == "script" ]
then
    echo "*******************************************************"
    echo "* Executing script $MAGPIE_SCRIPT_PATH"
    echo "*******************************************************"
    ${MAGPIE_SCRIPT_PATH} &
    scriptpid=$!
    Magpie_wait_script ${scriptpid}
elif [ "${MAGPIE_JOB_TYPE}" == "interactive" ]
then
    echo "*******************************************************"
    echo "* Entering Magpie ${MAGPIE_JOB_TYPE} mode"
    echo "*******************************************************"
    magpiesleepamounttemp=`expr ${MAGPIE_TIMELIMIT_MINUTES} - ${MAGPIE_STARTUP_TIME}`
    magpiesleepamount=`expr ${magpiesleepamounttemp} - ${MAGPIE_SHUTDOWN_TIME}`
    magpiesleepseconds=`expr ${magpiesleepamount}  \* 60`
    sleep ${magpiesleepseconds}
elif [ "${MAGPIE_JOB_TYPE}" == "pig" ]
then
    if [ "${hadoopsetuppass}" == "1" ]
    then
	echo "*******************************************************"
	echo "* Executing Pig script $PIG_SCRIPT_PATH"
	echo "*******************************************************"
	${PIG_HOME}/bin/pig ${PIG_SCRIPT_OPTS} ${PIG_SCRIPT_PATH} &
	scriptpid=$!
	Magpie_wait_script ${scriptpid}
    fi
elif [ "${MAGPIE_JOB_TYPE}" == "hadoop" ]
then
    if [ "${hadoopsetuppass}" == "1" ]
    then
	cd ${HADOOP_HOME}

	if [ "${HADOOP_MODE}" == "terasort" ]
	then
	    echo "*******************************************************"
	    echo "* Running Terasort"
	    echo "*******************************************************"

	    ${MAGPIE_SCRIPTS_HOME}/magpie-run-terasort &
	    scriptpid=$!
	    Magpie_wait_script ${scriptpid}
	elif [ "${HADOOP_MODE}" == "script" ]
	then
	    echo "*******************************************************"
	    echo "* Executing script $HADOOP_SCRIPT_PATH"
	    echo "*******************************************************"
	    ${HADOOP_SCRIPT_PATH} &
	    scriptpid=$!
	    Magpie_wait_script ${scriptpid}
	elif [ "${HADOOP_MODE}" == "interactive" ] \
	    || [ "${HADOOP_MODE}" == "setuponly" ]
	then
	    echo "*******************************************************"
	    echo "* Entering Hadoop ${HADOOP_MODE} mode"
	    echo "*******************************************************"
	    hadoopsleepamounttemp=`expr ${MAGPIE_TIMELIMIT_MINUTES} - ${MAGPIE_STARTUP_TIME}`
	    hadoopsleepamount=`expr ${hadoopsleepamounttemp} - ${MAGPIE_SHUTDOWN_TIME}`
	    hadoopsleepseconds=`expr ${hadoopsleepamount}  \* 60`
	    sleep ${hadoopsleepseconds}
	fi
    fi
elif [ "${MAGPIE_JOB_TYPE}" == "hbase" ]
then
    if [ "${hadoopsetuppass}" == "1" ]
    then
	cd ${HBASE_HOME}
    
	if [ "${HBASE_MODE}" == "performanceeval" ]
	then
	    echo "*******************************************************"
	    echo "* Running Performance Evaluation"
	    echo "*******************************************************"
	    
	    ${MAGPIE_SCRIPTS_HOME}/magpie-run-performanceeval &
	    scriptpid=$!
	    Magpie_wait_script ${scriptpid}
	elif [ "${HBASE_MODE}" == "script" ]
	then
	    echo "*******************************************************"
	    echo "* Executing script $HBASE_SCRIPT_PATH"
	    echo "*******************************************************"
	    ${HBASE_SCRIPT_PATH} &
	    scriptpid=$!
	    Magpie_wait_script ${scriptpid}
	elif [ "${HBASE_MODE}" == "interactive" ] \
	    || [ "${HBASE_MODE}" == "setuponly" ]
	then
	    echo "*******************************************************"
	    echo "* Entering Hbase ${HBASE_MODE} mode"
	    echo "*******************************************************"
	    
	    hbasesleepamounttemp=`expr ${MAGPIE_TIMELIMIT_MINUTES} - ${MAGPIE_STARTUP_TIME}`
	    hbasesleepamount=`expr ${hbasesleepamounttemp} - ${MAGPIE_SHUTDOWN_TIME}`
	    hbasesleepseconds=`expr ${hbasesleepamount}  \* 60`
	    sleep ${hbasesleepseconds}
	fi
    fi
fi

if [ "${HBASE_SETUP}" == "yes" ]
then
    if [ ${HBASE_MODE} != "setuponly" ]
    then
	cd ${HBASE_HOME}
	
	echo "Stopping hbase"
	
	if [ "${HBASE_MAJOR_COMPACTION_ON_SHUTDOWN}X" == "X" ] || [ "${HBASE_MAJOR_COMPACTION_ON_SHUTDOWN}" == "yes" ]
	then
	    echo "Doing major compaction before shutting down ..."

	    command="echo list"
	    echo "Running $command in hbase shell" >&2
	    listoutput=`$command | bin/hbase shell | sed -n '/TABLE/,/seconds/p' | tail -n+2 | head -n -1`

	    for table in ${listoutput}
	    do
		command="echo major_compact '${table}'"
		echo "Running $command in hbase shell" >&2
		$command | bin/hbase shell
	    done
	fi
	
	${hbasescriptprefix}/stop-hbase.sh
    fi
fi

if [ "${HADOOP_SETUP}" == "yes" ]
then
    if [ ${HADOOP_MODE} != "setuponly" ]
    then
	cd ${HADOOP_HOME}
	
	echo "Stopping hadoop"

	if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
	then
	    ${hadoopscriptprefix}/stop-mapred.sh
	    ${hadoopscriptprefix}/stop-jobhistoryserver.sh
	fi
	
	if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
	then
	    ${hadoopscriptprefix}/stop-yarn.sh
	    ${hadoopscriptprefix}/mr-jobhistory-daemon.sh stop historyserver
	fi

	if [ "$HADOOP_FILESYSTEM_MODE" == "hdfs" ] \
	    || [ "$HADOOP_FILESYSTEM_MODE" == "hdfsoverlustre" ] \
	    || [ "$HADOOP_FILESYSTEM_MODE" == "hdfsovernetworkfs" ]
	then
	    echo "Saving namespace before shutting down hdfs ..."

	    command="bin/${dfsadminscript} dfsadmin -safemode enter"
	    echo "Running $command" >&2
	    $command

	    command="bin/${dfsadminscript} dfsadmin -saveNamespace"
	    echo "Running $command" >&2
	    $command

	    command="bin/${dfsadminscript} dfsadmin -safemode leave"
	    echo "Running $command" >&2
	    $command

	    ${hadoopscriptprefix}/stop-dfs.sh 
	fi
    fi
fi

if [ "${ZOOKEEPER_SETUP}" == "yes" ]
then
    if [ "${ZOOKEEPER_MODE}" != "setuponly" ]
    then
	zookeepernodes=`cat ${ZOOKEEPER_CONF_DIR}/zookeeper_slaves`
	
	for zookeepernode in ${zookeepernodes}
	do
	    ${magpieremotecmd} ${MAGPIE_REMOTE_CMD_OPTS} ${zookeepernode} ${MAGPIE_SCRIPTS_HOME}/bin/magpie-launch-zookeeper.sh ${ZOOKEEPER_CONF_DIR} ${ZOOKEEPER_HOME} stop
	done
    fi
fi

exit 0

