#!/bin/bash
#############################################################################
#  Copyright (C) 2013 Lawrence Livermore National Security, LLC.
#  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
#  Written by Albert Chu <chu11@llnl.gov>
#  LLNL-CODE-644248
#  
#  This file is part of Magpie, scripts for running Hadoop on
#  traditional HPC systems.  For details, see <URL>.
#  
#  Magpie is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  Magpie is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with Magpie.  If not, see <http://www.gnu.org/licenses/>.
#############################################################################

# This script is checks environment variable setup. For the most part,
# it shouldn't be editted.  See magpie.sbatch for configuration
# details.

#
# Check Core Inputs
#

if [ "${MAGPIE_SUBMISSION_TYPE}X" == "X" ]
then
    echo "MAGPIE_SUBMISSION_TYPE environment variable must be set"
    exit 1
fi

if [ "${MAGPIE_SUBMISSION_TYPE}" != "slurmsbatch" ]
then
    echo "MAGPIE_SUBMISSION_TYPE environment variable must be set to slurmsbatch"
    exit 1
fi

if [ "${MAGPIE_SUBMISSION_TYPE}" == "slurmsbatch" ]
then
    if [ "${SLURM_NODEID}X" == "X" ]
    then
	echo "SLURM_NODEID environment variable must be set"
	exit 1
    fi
    if [ "${SLURM_NNODES}X" == "X" ]
    then
	echo "SLURM_NNODES environment variable must be set"
	exit 1
    fi
    if [ "${SLURM_JOB_NODELIST}X" == "X" ]
    then
	echo "SLURM_JOB_NODELIST environment variable must be set"
	exit 1
    fi
    if [ "${SLURM_JOB_NAME}X" == "X" ]
    then
	echo "SLURM_JOB_NAME environment variable must be set"
	exit 1
    fi
    if [ "${SLURM_JOB_ID}X" == "X" ]
    then
	echo "SLURM_JOB_ID environment variable must be set"
	exit 1
    fi
    if [ "${SBATCH_TIMELIMIT}X" == "X" ]
    then
	echo "SBATCH_TIMELIMIT environment variable must be set"
	exit 1
    fi
fi

#
# Check Magpie Inputs
#

if [ "${MAGPIE_SCRIPTS_HOME}X" == "X" ]
then
    echo "MAGPIE_SCRIPTS_HOME must be set"
    exit 1
fi

if [ ! -d ${MAGPIE_SCRIPTS_HOME} ]
then
    echo "${MAGPIE_SCRIPTS_HOME} does not point to a directory"
    exit 1
fi

if [ ! -f "${MAGPIE_SCRIPTS_HOME}/magpie-common-exports" ]
then
    echo "${MAGPIE_SCRIPTS_HOME}/magpie-common-exports cannot be found"
    exit 1
fi

if [ ! -f "${MAGPIE_SCRIPTS_HOME}/magpie-submission-convert" ]
then
    echo "${MAGPIE_SCRIPTS_HOME}/magpie-submission-convert cannot be found"
    exit 1
fi

source ${MAGPIE_SCRIPTS_HOME}/magpie-submission-convert

if [ "${MAGPIE_LOCAL_DIR}X" == "X" ]
then
    echo "MAGPIE_LOCAL_DIR must be set"
    exit 1
fi

if [ "${MAGPIE_JOB_TYPE}X" == "X" ]
then
    echo "MAGPIE_JOB_TYPE must be set"
    exit 1
fi 

if [ "${MAGPIE_JOB_TYPE}" != "hadoop" ] \
    && [ "${MAGPIE_JOB_TYPE}" != "hbase" ] \
    && [ "${MAGPIE_JOB_TYPE}" != "pig" ] \
    && [ "${MAGPIE_JOB_TYPE}" != "script" ] \
    && [ "${MAGPIE_JOB_TYPE}" != "interactive" ]
then
    echo "MAGPIE_JOB_TYPE must be set to hadoop, hbase, pig, script, or interactive"
    exit 1
fi

if [ "${MAGPIE_JOB_TYPE}" == "script" ]
then
    if [ "${MAGPIE_SCRIPT_PATH}X" == "X" ]
    then
       echo "Script MAGPIE_SCRIPT_PATH must be specified"
       exit 1
    fi

    if [ ! -x ${MAGPIE_SCRIPT_PATH} ]
    then
       echo "Script MAGPIE_SCRIPT_PATH \"$MAGPIE_SCRIPT_PATH\" does not have execute permissions"
       exit 1
    fi
fi

if [ "${MAGPIE_STARTUP_TIME}X" == "X" ]
then
    magpiestartuptime=30
else
    magpiestartuptime=${MAGPIE_STARTUP_TIME}
fi

if [ "${MAGPIE_SHUTDOWN_TIME}X" == "X" ]
then
    magpieshutdowntime=30
else
    magpieshutdowntime=${MAGPIE_SHUTDOWN_TIME}
fi

magpiestartupshutdowntime=`expr ${magpiestartuptime} + ${magpieshutdowntime}`

if [ ${MAGPIE_TIMELIMIT_MINUTES} -le ${magpiestartupshutdowntime} ]
then
    echo "timelimit must be atleast the sum of MAGPIE_STARTUP_TIME & MAGPIE_SHUTDOWN_TIME"
    exit 1
fi

if [ "${MAGPIE_PRE_JOB_RUN}X" != "X" ] && [ ! -x "${MAGPIE_PRE_JOB_RUN}" ]
then 
    echo "Script MAGPIE_PRE_JOB_RUN=\"${MAGPIE_PRE_JOB_RUN}\" is not executable"
    exit 1
fi

if [ "${MAGPIE_POST_JOB_RUN}X" != "X" ] && [ ! -x "${MAGPIE_POST_JOB_RUN}" ]
then 
    echo "Script MAGPIE_POST_JOB_RUN=\"${MAGPIE_POST_JOB_RUN}\" is not executable"
    exit 1
fi

if [ "${MAGPIE_POST_JOB_RUN}X" != "X" ] && [ ${magpiestartuptime} -lt 5 ]
then
    echo "MAGPIE_STARTUP_TIME must be >= 5 minutes"
    exit 1
fi

if [ "${MAGPIE_POST_JOB_RUN}X" != "X" ] && [ ${magpieshutdowntime} -lt 5 ]
then
    echo "MAGPIE_SHUTDOWN_TIME must be >= 5 minutes"
    exit 1
fi

if [ "${MAGPIE_POST_JOB_RUN}X" != "X" ] && [ ${magpieshutdowntime} -lt 10 ]
then
    echo "MAGPIE_SHUTDOWN_TIME must be >= 10 minutes if MAGPIE_POST_JOB_RUN is set"
    exit 1
fi

#
# Check General Inputs
#

if [ "${JAVA_HOME}X" == "X" ]
then
    echo "JAVA_HOME must be set"
    exit 1
fi

if [ ! -d ${JAVA_HOME} ]
then
    echo "${JAVA_HOME} does not point to a directory"
    exit 1
fi

nodecount=${MAGPIE_NODE_COUNT}

if [ "${HADOOP_SETUP}X" != "X" ] \
    && ( [ "${HADOOP_SETUP}" != "yes" ] && [ "${HADOOP_SETUP}" != "no" ] )
then
    echo "HADOOP_SETUP must be set to yes or no"
    exit 1
fi

if [ "${HADOOP_UDA_SETUP}X" != "X" ] \
    && ( [ "${HADOOP_UDA_SETUP}" != "yes" ] && [ "${HADOOP_UDA_SETUP}" != "no" ] )
then
    echo "HADOOP_UDA_SETUP must be set to yes or no"
    exit 1
fi

if [ "${PIG_SETUP}X" != "X" ] \
    && ( [ "${PIG_SETUP}" != "yes" ] && [ "${PIG_SETUP}" != "no" ] )
then
    echo "PIG_SETUP must be set to yes or no"
    exit 1
fi

if [ "${ZOOKEEPER_SETUP}X" != "X" ] \
    && ( [ "${ZOOKEEPER_SETUP}" != "yes" ] && [ "${ZOOKEEPER_SETUP}" != "no" ] )
then
    echo "ZOOKEEPER_SETUP must be set to yes or no"
    exit 1
fi

if [ "${HBASE_SETUP}X" != "X" ] \
    && ( [ "${HBASE_SETUP}" != "yes" ] && [ "${HBASE_SETUP}" != "no" ] )
then
    echo "HBASE_SETUP must be set to yes or no"
    exit 1
fi

# Did user turn on SOMETHING to run
#
# Pig is not "something", b/c it needs hadoop 

if [ "${HADOOP_SETUP}" != "yes" ] \
    && [ "${ZOOKEEPER_SETUP}" != "yes" ] \
    && [ "${HBASE_SETUP}" != "yes" ]
then
    echo "Neither HADOOP_SETUP nor ZOOKEEPER_SETUP nor HBASE_SETUP are set to yes, there is nothing to setup"
    exit 1
fi

# Did user turn on something matching job run type

if [ "${MAGPIE_JOB_TYPE}" == "hadoop" ] \
    && [ "${HADOOP_SETUP}" != "yes" ]
then
    echo "Cannot run hadoop job type if HADOOP_SETUP is not enabled"
    exit 1
fi

if [ "${MAGPIE_JOB_TYPE}" == "pig" ] \
    && [ "${PIG_SETUP}" != "yes" ]
then
    echo "Cannot run pig job type if PIG_SETUP is not enabled"
    exit 1
fi
   
if [ "${MAGPIE_JOB_TYPE}" == "hbase" ] \
    && [ "${HBASE_SETUP}" != "yes" ]
then
    echo "Cannot run hbase job type if HBASE_SETUP is not enabled"
    exit 1
fi

#
# Check Hadoop Inputs 
#

if [ "${HADOOP_SETUP}" == "yes" ]
then
# Subtract 1 for Hadoop Master
    nodecount=$((nodecount-1))

    if [ "${HADOOP_SETUP_TYPE}" != "MR1" ] \
	&& [ "${HADOOP_SETUP_TYPE}" != "MR2" ] \
	&& [ "${HADOOP_SETUP_TYPE}" != "HDFS1" ] \
	&& [ "${HADOOP_SETUP_TYPE}" != "HDFS2" ]
    then
	echo "HADOOP_SETUP_TYPE must be set to MR1 or MR2 or HDFS1 or HDFS2"
	exit 1
    fi

    if [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
    then
	if [ "${HADOOP_VERSION}X" == "X" ]
	then
	    echo "HADOOP_VERSION must be set for HADOOP_SETUP_TYPE = MR2"
	    exit 1
	fi
    fi

    if [ "${HADOOP_HOME}X" == "X" ]
    then
	echo "HADOOP_HOME must be set"
	exit 1
    fi

    if [ ! -d ${HADOOP_HOME} ]
    then
	echo "${HADOOP_HOME} does not point to a directory"
	exit 1
    fi

    if [ "${HADOOP_LOCAL_DIR}X" == "X" ]
    then
	echo "HADOOP_LOCAL_DIR must be set"
	exit 1
    fi

    if [ "${HADOOP_MODE}" != "terasort" ] \
	&& [ "${HADOOP_MODE}" != "script" ] \
	&& [ "${HADOOP_MODE}" != "interactive" ] \
	&& [ "${HADOOP_MODE}" != "setuponly" ]
    then
	echo "HADOOP_MODE must be set to terasort, script, interactive, setuponly"
	exit 1
    fi

    if ([ "${HADOOP_SETUP_TYPE}" == "HDFS1" ] \
	|| [ "${HADOOP_SETUP_TYPE}" == "HDFS2" ]) \
	&& [ "${MAGPIE_JOB_TYPE}" == "hadoop" ] \
	&& [ "${HADOOP_MODE}" == "terasort" ]
    then
	echo "Cannot run HADOOP_MODE as terasort when HADOOP_SETUP_TYPE is ${HADOOP_SETUP_TYPE}"
	exit 1
    fi

    if [ "${MAGPIE_JOB_TYPE}" == "hadoop" ] && [ "${HADOOP_MODE}" == "terasort" ]
    then
	if [ "${HADOOP_VERSION}X" == "X" ]
	then
	    echo "HADOOP_VERSION must be set for terasort mode"
	    exit 1
	fi

	if [ ! -f "${MAGPIE_SCRIPTS_HOME}/magpie-run-terasort" ]
	then
	    echo "${MAGPIE_SCRIPTS_HOME}/magpie-run-terasort cannot be found, it is required to run terasort"
	    exit 1
	fi
    fi

    if [ "${MAGPIE_JOB_TYPE}" == "hadoop" ] && [ "${HADOOP_MODE}" == "script" ]
    then
	if [ "${HADOOP_SCRIPT_PATH}X" == "X" ]
	then
	    echo "Script HADOOP_SCRIPT_PATH must be specified"
	    exit 1
	fi
	
	if [ ! -x ${HADOOP_SCRIPT_PATH} ]
	then
	    echo "Script HADOOP_SCRIPT_PATH \"$HADOOP_SCRIPT_PATH\" does not have execute permissions"
	    exit 1
	fi
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" != "hdfs" ] \
	&& [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsoverlustre" ] \
	&& [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsovernetworkfs" ] \
	&& [ "${HADOOP_FILESYSTEM_MODE}" != "rawnetworkfs" ] \
	&& [ "${HADOOP_FILESYSTEM_MODE}" != "intellustre" ] \
	&& [ "${HADOOP_FILESYSTEM_MODE}" != "magpienetworkfs" ]
    then
	echo "HADOOP_FILESYSTEM_MODE must be set to hdfs, hdfsoverlustre, hdfsovernetworkfs, rawnetworkfs, intellustre, or magpienetworkfs"
	exit 1
    fi

    if ([ "${HADOOP_SETUP_TYPE}" == "HDFS1" ] \
	|| [ "${HADOOP_SETUP_TYPE}" == "HDFS2" ]) \
	&& ([ "${HADOOP_FILESYSTEM_MODE}" != "hdfs" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsoverlustre" ] \
        && [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsovernetworkfs" ])
    then
	echo "HADOOP_SETUP_TYPE of ${HADOOP_SETUP_TYPE} must be set with HADOOP_FILESYSTEM_MODE of hdfs, hdfsoverlustre, or hdfsovernetworkfs"
	exit 1
    fi

    if ([ "${HADOOP_FILESYSTEM_MODE}" == "intellustre" ] \
	|| [ "${HADOOP_FILESYSTEM_MODE}" == "magpienetworkfs" ]) \
	&& [ "${HADOOP_SETUP_TYPE}" != "MR2" ]
    then
	echo "HADOOP_FILESYSTEM_MODE=${HADOOP_FILESYSTEM_MODE} only works with HADOOP_SETUP_TYPE=MR2"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hdfs" ] \
	&& [ "${HADOOP_HDFS_PATH}X" == "X" ]
    then
	echo "Must specify environment variable HADOOP_HDFS_PATH"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hdfsoverlustre" ] \
	&& [ "${HADOOP_HDFSOVERLUSTRE_PATH}X" == "X" ]
    then
	echo "Must specify environment variable HADOOP_HDFSOVERLUSTRE_PATH"
	exit 1
    fi

    if [ "${HADOOP_HDFSOVERLUSTRE_REMOVE_LOCKS}X" != "X" ] \
	&& ( [ "${HADOOP_HDFSOVERLUSTRE_REMOVE_LOCKS}" != "yes" ] && [ "${HADOOP_HDFSOVERLUSTRE_REMOVE_LOCKS}" != "no" ])
    then
	echo "HADOOP_HDFSOVERLUSTRE_REMOVE_LOCKS must be set to yes or no"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "hdfsovernetworkfs" ] \
	&& [ "${HADOOP_HDFSOVERNETWORKFS_PATH}X" == "X" ]
    then
	echo "Must specify environment variable HADOOP_HDFSOVERNETWORKFS_PATH"
	exit 1
    fi

    if [ "${HADOOP_HDFSOVERNETWORKFS_REMOVE_LOCKS}X" != "X" ] \
	&& ( [ "${HADOOP_HDFSOVERNETWORKFS_REMOVE_LOCKS}" != "yes" ] && [ "${HADOOP_HDFSOVERNETWORKFS_REMOVE_LOCKS}" != "no" ])
    then
	echo "HADOOP_HDFSOVERNETWORKFS_REMOVE_LOCKS must be set to yes or no"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "rawnetworkfs" ] \
	&& [ "${HADOOP_RAWNETWORKFS_PATH}X" == "X" ]
    then
	echo "Must specify environment variable HADOOP_RAWNETWORKFS_PATH"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "intellustre" ] \
	&& [ "${HADOOP_INTELLUSTRE_PATH}X" == "X" ]
    then
	echo "Must specify environment variable HADOOP_INTELLUSTRE_PATH"
	exit 1
    fi

    if [ "${HADOOP_INTELLUSTRE_SHUFFLE}X" != "X" ] \
	&& ( [ "${HADOOP_INTELLUSTRE_SHUFFLE}" != "yes" ] && [ "${HADOOP_INTELLUSTRE_SHUFFLE}" != "no" ])
    then
	echo "HADOOP_INTELLUSTRE_SHUFFLE must be set to yes or no"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "magpienetworkfs" ] \
	&& [ "${HADOOP_MAGPIENETWORKFS_PATH}X" == "X" ]
    then
	echo "Must specify environment variable HADOOP_MAGPIENETWORKFS_PATH"
	exit 1

	firstchar="$(echo ${HADOOP_MAGPIENETWORKFS_PATH} | head -c 1)"

	if [ "${firstchar}" != "/" ]
	then
	    echo "HADOOP_MAGPIENETWORKFS_PATH must be an absolute path"
	    exit 1
	fi
    fi

    if [ "${HADOOP_TERASORT_CLEAR_CACHE}X" != "X" ] \
	&& ( [ "${HADOOP_TERASORT_CLEAR_CACHE}" != "yes" ] && [ "${HADOOP_TERASORT_CLEAR_CACHE}" != "no" ])
    then
	echo "HADOOP_TERASORT_CLEAR_CACHE must be set to yes or no"
	exit 1
    fi

    if [ "${HADOOP_COMPRESSION}X" != "X" ] \
	&& ( [ "${HADOOP_COMPRESSION}" != "yes" ] && [ "${HADOOP_COMPRESSION}" != "no" ])
    then
	echo "HADOOP_COMPRESSION must be set to yes or no"
	exit 1
    fi

    if [ ${nodecount} -le "0" ]
    then
	echo "No remaining nodes for Hadoop slave nodes, increase node count or adjust node allocations"
	exit 1
    fi
fi

#
# Check UDA Inputs 
#

if [ "${HADOOP_UDA_SETUP}" == "yes" ]
then
    if [ "${HADOOP_SETUP}" != "yes" ]
    then
	echo "UDA requires Hadoop to be setup, set HADOOP_SETUP to yes"
	exit 1
    fi

    if [ "${HADOOP_SETUP_TYPE}" == "MR1" ] \
	|| [ "${HADOOP_SETUP_TYPE}" == "MR2" ]
    then
	if [ "${HADOOP_SETUP_TYPE}" == "MR1" ]
	then
	    echo "UDA is only supported on HADOOP MRv2 right now."
	    exit 1
	fi

	if echo ${HADOOP_VERSION} | grep -q -E "2\.[0-1]\.[0-9]"
	then 
	    echo "HADOOP UDA only supported in Hadoop 2.2.0 and more recent versions"
	    exit 1
	fi

	if [ "${HADOOP_UDA_JAR}X" == "X" ]
	then
	    echo "HADOOP_UDA_JAR must be set"
	    exit 1
	fi

	if [ ! -f "${HADOOP_UDA_JAR}" ]
	then
	    echo "Jar HADOOP_UDA_JAR \"$HADOOP_UDA_JAR\" is not a regular file"
	    exit 1
	fi

	if [ "${HADOOP_UDA_LIBPATH}X" != "X" ]
	then
	    if [ ! -d "${HADOOP_UDA_LIBPATH}" ]
	    then
		echo "Library path HADOOP_UDA_LIBPATH \"$HADOOP_UDA_LIBPATH\" is not a directory"
		exit 1
	    fi
	fi
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" == "intellustre" ] \
	&& [ "${HADOOP_INTELLUSTRE_SHUFFLE}X" != "X" ] \
	&& [ "${HADOOP_INTELLUSTRE_SHUFFLE}" == "yes" ]
    then
	echo "UDA shuffling cannot be enabled alongside Lustre Shuffling, please disable one"
	exit 1
    fi
fi

#
# Check Pig Inputs 
#

if [ "${PIG_SETUP}" == "yes" ]
then
    if [ "${HADOOP_SETUP}" != "yes" ]
    then
	echo "Pig requires Hadoop to be setup, set HADOOP_SETUP to yes"
	exit 1
    fi

    if [ "${PIG_HOME}X" == "X" ]
    then
       echo "PIG_HOME must be set"
       exit 1
    fi
    
    if [ ! -d ${PIG_HOME} ]
    then
       echo "${PIG_HOME} does not point to a directory"
       exit 1
    fi

    if [ "${PIG_LOCAL_DIR}X" == "X" ]
    then
       echo "PIG_LOCAL_DIR must be set"
       exit 1
    fi

    if [ "${PIG_MODE}" != "testpig" ] \
	&& [ "${PIG_MODE}" != "script" ] \
	&& [ "${PIG_MODE}" != "interactive" ]
    then
	echo "PIG_MODE must be set to testpig, script, interactive"
	exit 1
    fi

    if [ "${MAGPIE_JOB_TYPE}" == "pig" ] && [ "${PIG_MODE}" == "script" ]
    then
	if [ "${PIG_SCRIPT_PATH}X" == "X" ]
	then
	    echo "Script PIG_SCRIPT_PATH must be specified"
	    exit 1
	fi
    fi

    if [ "${MAGPIE_JOB_TYPE}" == "pig" ] \
	&& ([ "${PIG_MODE}" == "testpig" ] || [ "${PIG_MODE}" == "script" ])
    then
	if [ "${HADOOP_MODE}" == "setuponly" ]
	then
	    echo "Cannot run Pig job if Hadoop mode is setuponly"
	    exit 1
	fi
    fi
fi

#
# Check Hbase Inputs 
#

if [ "${HBASE_SETUP}" == "yes" ]
then
# Subtract 1 for Hbase Master
# if Hadoop already setup, don't subtract
    if [ "${HADOOP_SETUP}" != "yes" ]
    then
	nodecount=$((nodecount-1))
    fi

    if [ "${HBASE_HOME}X" == "X" ]
    then
       echo "HBASE_HOME must be set"
       exit 1
    fi
    
    if [ ! -d ${HBASE_HOME} ]
    then
       echo "${HBASE_HOME} does not point to a directory"
       exit 1
    fi

    if [ "${HBASE_LOCAL_DIR}X" == "X" ]
    then
       echo "HBASE_LOCAL_DIR must be set"
       exit 1
    fi

    if [ "${HADOOP_SETUP}" != "yes" ]
    then
	echo "Hadoop must be enabled for Hbase"
	exit 1
    fi

    if [ "${HADOOP_FILESYSTEM_MODE}" != "hdfs" ] \
    	&& [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsoverlustre" ] \
    	&& [ "${HADOOP_FILESYSTEM_MODE}" != "hdfsovernetworkfs" ]
    then
    	echo "Magpie presently only supports Hbase over HDFS"
    	echo "HADOOP_FILESYSTEM_MODE must be set to hdfs, hdfsoverlustre, or hdfsovernetworkfs"
    	exit 1
    fi

    if [ "${ZOOKEEPER_SETUP}" != "yes" ]
    then
	echo "Zookeeper must be enabled for Hbase"
	exit 1
    fi

    if [ "${magpieshutdowntime}" -lt 20 ]
    then
	echo "Magpie Shutdown Time must be atleast 20 minutes with Hbase"
	exit 1
    fi

    if [ "${HBASE_MODE}" != "performanceeval" ] \
	&& [ "${HBASE_MODE}" != "script" ] \
	&& [ "${HBASE_MODE}" != "interactive" ] \
	&& [ "${HBASE_MODE}" != "setuponly" ]
    then
	echo "HBASE_MODE must be set to performanceeval, script, interactive, setuponly"
	exit 1
    fi

    if [ "${MAGPIE_JOB_TYPE}" == "hbase" ] && [ "${HBASE_MODE}" == "performanceeval" ]
    then
	if [ "${HBASE_PERFORMANCEEVAL_MODE}X" != "X" ]
	then
	    if [ "${HBASE_PERFORMANCEEVAL_MODE}" != "sequential-thread" ] \
		&& [ "${HBASE_PERFORMANCEEVAL_MODE}" != "sequential-mr" ] \
		&& [ "${HBASE_PERFORMANCEEVAL_MODE}" != "random-thread" ] \
		&& [ "${HBASE_PERFORMANCEEVAL_MODE}" != "random-mr" ]
	    then
		echo "HBASE_PERFORMANCEEVAL_MODE must be sequential-thread, sequential-mr, random-thread, or random-mr"
		exit 1
	    fi
	fi

	if ([ "${HADOOP_SETUP_TYPE}" == "HDFS1" ] || [ "${HADOOP_SETUP_TYPE}" == "HDFS2" ]) \
	    && (["${HBASE_PERFORMANCEEVAL_MODE}" == "sequential-mr" ] || [ "${HBASE_PERFORMANCEEVAL_MODE}" == "random-mr" ])
	then
	    echo "Cannot execute MapReduce performance evaluation if HADOOP_SETUP_TYPE set to ${HADOOP_SETUP_TYPE}"
	    exit 1
	fi

	if [ "${HBASE_PERFORMANCEEVAL_ROW_COUNT}X" != "X" ]
	then
	    if [ "${HBASE_PERFORMANCEEVAL_ROW_COUNT}" -lt 1 ]
	    then
		echo "HBASE_PERFORMANCEEVAL_ROW_COUNT must be >= 1"
		exit 1
	    fi
	fi

	if [ "${HBASE_PERFORMANCEEVAL_CLIENT_COUNT}X" != "X" ]
	then
	    if [ "${HBASE_PERFORMANCEEVAL_CLIENT_COUNT}" -lt 1 ] || [ "${HBASE_PERFORMANCEEVAL_CLIENT_COUNT}" -gt 500 ]
	    then
		echo "HBASE_PERFORMANCEEVAL_CLIENT_COUNT must be >= 1 and <= 500"
		exit 1
	    fi
	fi

	if [ ! -f "${MAGPIE_SCRIPTS_HOME}/magpie-run-performanceeval" ]
	then
	    echo "${MAGPIE_SCRIPTS_HOME}/magpie-run-performanceeval cannot be found, it is required to run hbase performance evaluation"
	    exit 1
	fi
    fi

    if [ "${MAGPIE_JOB_TYPE}" == "hbase" ] && [ "${HBASE_MODE}" == "script" ]
    then
	if [ "${HBASE_SCRIPT_PATH}X" == "X" ]
	then
	    echo "Script HBASE_SCRIPT_PATH must be specified"
	    exit 1
	fi
	
	if [ ! -x ${HBASE_SCRIPT_PATH} ]
	then
	    echo "Script HBASE_SCRIPT_PATH \"$HBASE_SCRIPT_PATH\" does not have execute permissions"
	    exit 1
	fi
    fi

    if ([ "${HBASE_MODE}" == "performanceeval" ] \
	|| [ "${HBASE_MODE}" == "script" ] \
	|| [ "${HBASE_MODE}" == "interactive" ]) \
	&& [ "${HADOOP_MODE}" == "setuponly" ]
    then
	echo "Cannot run Hbase job if Hadoop mode is setuponly"
	exit 1
    fi

    if [ "${HBASE_MAJOR_COMPACTION_ON_SHUTDOWN}X" != "X" ]
    then
	if [ "${HBASE_MAJOR_COMPACTION_ON_SHUTDOWN}" != "yes" ] && [ "${HBASE_MAJOR_COMPACTION_ON_SHUTDOWN}" != "no" ]
	then
	    echo "HBASE_MAJOR_COMPACTION_ON_SHUTDOWN must be set to yes or no"
	    exit 1
	fi
    fi

    if ([ "${HBASE_MODE}" == "performanceeval" ] \
	|| [ "${HBASE_MODE}" == "script" ] \
	|| [ "${HBASE_MODE}" == "interactive" ]) \
	&& [ "${ZOOKEEPER_MODE}" == "setuponly" ]
    then
	echo "Cannot run Hbase job if Zookeeper mode is setuponly"
	exit 1
    fi

    if [ ${nodecount} -le "0" ]
    then
	echo "No remaining nodes for Hbase regionservers, increase node count or adjust node allocations"
	exit 1
    fi
fi

#
# Check Zookeeper Inputs 
#

if [ "${ZOOKEEPER_SETUP}" == "yes" ]
then
    if [ ! -f "${MAGPIE_SCRIPTS_HOME}/bin/magpie-launch-zookeeper.sh" ]
    then
	echo "${MAGPIE_SCRIPTS_HOME}/bin/magpie-launch-zookeeper.sh is needed to launch Zookeeper"
	exit 1
    fi

    if [ "${ZOOKEEPER_MODE}" != "launch" ] \
       && [ "${ZOOKEEPER_MODE}" != "setuponly" ]
    then
       echo "ZOOKEEPER_MODE must be set to launch or setuponly"
       exit 1
    fi

    if [ "${ZOOKEEPER_REPLICATION_COUNT}X" == "X" ]
    then
       echo "ZOOKEEPER_REPLICATION_COUNT must be set"
       exit 1
    fi

    if [ ! "${ZOOKEEPER_REPLICATION_COUNT}" -gt "0" ]
    then
       echo "ZOOKEEPER_REPLICATION_COUNT must be > 0"
       exit 1
    fi

    if [ ! "${ZOOKEEPER_REPLICATION_COUNT}" -le "255" ]
    then
       echo "ZOOKEEPER_REPLICATION_COUNT must be less than <= 255"
       exit 1
    fi

    if [ ! "${ZOOKEEPER_REPLICATION_COUNT}" -le "${nodecount}" ]
    then
       echo "Not enough nodes for ZOOKEEPER_REPLICATION_COUNT"
       exit 1
    fi

    if [ "${ZOOKEEPER_SHARE_NODES}X" != "X" ]
    then
	if [ "${ZOOKEEPER_SHARE_NODES}" != "yes" ] && [ "${ZOOKEEPER_SHARE_NODES}" != "no" ]
	then
	    echo "ZOOKEEPER_SHARE_NODES must be set to yes or no"
	    exit 1
	fi
    fi

    if [ "${ZOOKEEPER_SHARE_NODES}" != "yes" ]
    then
	nodecount=$((nodecount-${ZOOKEEPER_REPLICATION_COUNT}))
    fi

    if [ "${ZOOKEEPER_HOME}X" == "X" ]
    then
       echo "ZOOKEEPER_HOME must be set"
       exit 1
    fi
    
    if [ ! -d ${ZOOKEEPER_HOME} ]
    then
       echo "${ZOOKEEPER_HOME} does not point to a directory"
       exit 1
    fi

    if [ "${ZOOKEEPER_FILESYSTEM_MODE}" != "networkfs" ] \
       && [ "${ZOOKEEPER_FILESYSTEM_MODE}" != "local" ]
    then
       echo "ZOOKEEPER_FILESYSTEM_MODE must be set to networkfs or local"
       exit 1
    fi

    if [ "${ZOOKEEPER_DATA_DIR}X" == "X" ]
    then
       echo "ZOOKEEPER_DATA_DIR must be set"
       exit 1
    fi

    if [ "${ZOOKEEPER_LOCAL_DIR}X" == "X" ]
    then
       echo "ZOOKEEPER_LOCAL_DIR must be set"
       exit 1
    fi

    if [ "${HADOOP_SETUP}" == "yes" ] && [ ${nodecount} -le "0" ]
    then
	echo "No remaining nodes for Hadoop slave nodes after Zookeeper allocation"
	echo "Please increase node count or adjust node allocations"
	exit 1
    fi

    if [ "${HBASE_SETUP}" == "yes" ] && [ ${nodecount} -le "0" ]
    then
	echo "No remaining nodes for Hbase regionservers after Zookeeper allocation"
	echo "Please increase node count or adjust node allocations"
	exit 1
    fi
fi

exit 0
